{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to yishang's notebook","text":""},{"location":"about/","title":"About","text":""},{"location":"about/#about-me","title":"About me","text":"<p> yishangzhang yishang's notebook   (powered by MkDocs) zhangyi2017@cug.edu.cn (\u611f\u8c22\u5730\u5927\u672a\u6536\u56de\u6211\u7684\u90ae\u7bb1)  </p>"},{"location":"about/#about-notebook","title":"About notebook","text":""},{"location":"about/#usage","title":"usage:","text":"<p>https://squidfunk.github.io/mkdocs-material/  </p> <p>https://shafish.cn/blog/mkdocs/ </p> <p>example</p>"},{"location":"example/","title":"example usage","text":"<p>The HTML specification is maintained by the W3C.</p> <pre><code>Optional&lt;String&gt; message = Optional.ofNullable(record.value()); // (1)\nif (message.isPresent()) {\n    System.out.println(message.get());\n}\n</code></pre> <ol> <li> optional\u5224\u7a7a\u5904\u7406.</li> </ol> <pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\nstd::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> m a a bdjfnb;srodnbodsrnbo;drbndrndnbjno c d <p>\u5220\u9664\u7ebfdeleted \u4e0b\u5212\u7ebfadded \u9ad8\u4eaehighlighting tianone  a single </p> <p> Image \u8bf4\u660e</p> <ul> <li> name </li> <li> age</li> <li> tel</li> </ul> <p>We can use Material Icons .</p> <p>We can also use Fontawesome Icons :fontawesome-solid-ambulance:.</p> <p>That's not all, we can also use Octicons :octicons-octoface:.</p>"},{"location":"backend/mends_the_sky/","title":"\u8865\u540e\u7aef\u77e5\u8bc6","text":""},{"location":"course/programming_languages/","title":"\u8bfe\u7a0b\u5730\u5740","text":"<p>part A</p> <p>part B</p> <p>part C</p>"},{"location":"course/programming_languages/emacs/","title":"Emacs","text":"<ul> <li> <p>\u5b89\u88c5\u73af\u5883\u914d\u7f6e</p> </li> <li> <p>\u5feb\u6377\u952e</p> <ul> <li>Ctrl x  Ctrl s \u4fdd\u5b58\u5f53\u524d\u6587\u4ef6</li> <li>ctrl c  ctrl s \u6253\u5f00repl \u7a97\u53e3</li> <li>ctrl x  0      \u5220\u9664\u5f53\u524d\u7a97\u53e3</li> <li>ctrl x  o      \u5207\u6362\u5f53\u524d\u7a97\u53e3</li> </ul> </li> </ul>"},{"location":"course/programming_languages/partA/","title":"part 3","text":""},{"location":"course/programming_languages/partA/#pair-and-tupple","title":"pair and tupple","text":""},{"location":"course/programming_languages/partA/#english","title":"english","text":"<p>OK. In this segment, we're going to start studying data and ML that's built out of smaller pieces of data. We're going to start with pairs. So, we've seen numbers, we've seen booleans, those are basic data values and we've seen various ways to program with them like conditionals or variables or functions. But we need some way to build up things that have fields, multiple parts of them. This is essential in any programming language. If you have programmed in a language like Java, you've probably programmed with arrays that contain multiple pieces or you've programmed with classes that had multiple fields that sort of thing. In ML, we are going to take a very sort of fundamental approach to it. We are going to start with tuples, which are a very direct way to have a fixed number of different data items, each of which can have different types and then in later segments, we'll start programming with lists that can have any length at run-time but all the pieces have to have the same type. These are not the only forms of compound data we will study but they will be enough for the first homework assignment and they'll get us started. So, we'll start with pairs, and the way I want you to think about pairs is that they are just things with two parts and so in terms of new language constructs we need a way to build pairs and we need a way to access the pieces of pairs. So, here on this slide I have the pair building expression and I have the answers to our three questions about them. In terms of syntax, we are going to write two expressions. We are going to separate them by a comma, put them in parentheses and that's the syntax for building a pair. What are the evaluation rules? Well what we are going to do is evaluate 'e1' to some value. Call it 'v1', 'e2' to a value called 'v2' and then that pair of values will be a value. So, one val new kind of value, something that's done evaluating, is a pair that holds itself values. We also have a new kind of type for these pairs. So, if 'e1' has some type say 'ta' and 'e2' has some type say 'tb' then the pair expression will have 'ta * tb'. So, just as the two parts of the pair, the types of those parts separated by a star. So, that's how we build pair expressions now how do we access the pieces? Well, I will show you a different way in the future but for now let's use these two constructs '#1' of an expression and '#2' of an expression. The evaluation rules are that we are going to evaluate that expression 'e' to some value it's going to be a pair and then '#1' will return the first part of that pair, and then '#2' would return the second part of the pair. So if 'x' is say the pair of four and 17 and we said '#1' of 'x', we'd get back 4. Type checking works similarly that 'e' in there better have a pair type, so it better be some 'ta * tb'. Otherwise this access expression doesn't type check and then '#1' of 'e' would have type 'ta' and '#2' of 'e' would have typed 'tb'. So those really are the rules but like anything you tend to really understand how they work by writing some programs and trying them out. So, let's just write a few functions that take or return pairs. So, how about I start with a 'swap' function maybe it takes one argument I'll call it 'pr' for pair maybe it has type 'intbool' so it takes something whose first part is an 'int' and second part is a 'bool'. And maybe what I want to return is a new pair where I build the first piece out of '#2' of pair and the second piece out of '#1' of pair. All right. So I'll show you in a second an example of how that works. In the meantime, how about I just write some other functions here. How about I take, write a function that takes two pairs both of which have type 'int * int' and just adds up those four pieces that are in there. So what I want to return is '#1' of pair one plus '#2' of pair one. I can grab these four pieces in any order I want. '#1' of pair two plus '#2' of pair two. It's a perfectly reasonable function that takes as arguments two 'int * int' and returns an int. So the type of this whole thing would be '(int * int) * (int * int)', and it returns an 'int' let's put that in a comment. All right? Let's do a couple of more. Oh, here's one that I really like because this is something that's just completely natural to do and a pain to do in many programming languages. Let's take in a numerator and denominator x and y so just two arguments of type and. And let's return X divided by Y and the remainder of x and y. Now these operators have strange names in ML; div and mod but I can still write this. All I'm doing here is returning a pair of two expressions the result of X div Y and the result of X mod Y and so this function is going to take in two 'ints' * 'int' and it's going to return a pair of 'ints' three to val print loop and we actually print this out won't write those parentheses but it's just that simple. All right. How about one more, how about we take in a pair of integers and we sort that pair. So we're going to return a pair of 'int' * 'int' and if the first part of the pair is less than the second part of the pair then we'll just return the pair we started with because it's already sorted. Otherwise, let's swap it around and return '#2' of pair, '#1' of pair. All right? So that seems like a good set of example functions. Let's real quickly go over here, make sure that I actually wrote those correctly and they load up here, good. We see that swap is has type 'int''bool' arrow 'bool''int'. So how about I try that out how about I tried calling it with seven and true and I get true seven if I call it with let's say minus four and false should get false and minus four. Now, you might be thinking how does ML know that I'm calling it with a pair and not calling it with two arguments. Well, in a future lecture I will show you the ML that's actually exactly the same thing but for now we'll keep them as separate concepts. And let me try one more here how about sort pair of (3,4). I just get back the pair (3,4) of type 'int''int' and if instead I had maybe had a value that was (4,3) and then I said sort pair of X it would come back (3,4). Of course, I could have just directly asked sort pair (4,3) I would get the same answer of course. OK. So that's programming with pairs. Let's go back to the slides here and show you that while that's really all there is the pairs we can, in fact, generalize this idea to tuples. So a pair is just a two tuple. In general you can have any number of pieces. So to build a tuple with n pieces you just have n expression separated by commas the type of that thing will be all the types of the expressions separated by stars or something like 'int''int''int' would be a triple where each piece was 'int' and you access the pieces with '#1 e, #2 e, #3 e' and so forth. So you'll get a lot of experience on this because 'int''intint' is in fact a common type for a lot of the problems on the first homework assignment. I also want to emphasize that without adding anything new to our language the rules I already showed you. You can nest tuples and other kinds of expressions as deep as you like. So, I have a few examples here on the slide we could type these into the redeveloped print loop or into an M-L file as well. But for example, if you write seven comma and then in it's own pair true comma nine. Well that's going to be a pair where the first part has type 'int' the second part is also a pair of type ('bool''int'). So the overall type is ('int') parenthesis ('bool''int'). Therefore, if you took that x 1 and you applied the hash to operation to it (#2 x1) is going to give back a ('bool''int'). So if we then added #1 of that so #1 of #2 of x 1 that would give you back something of type bool and in fact x 2 would evaluate to true. Similarly, x 3 which is this #2 of x 1 makes perfect sense. The result we look up X-1 in our environment we get (7, (true, 9)) we do #2 that, we're going to get (true, 9) and that's a perfectly reasonable value of type ('bool'*'int') that we can then bind to x 3. And of course, these things can nest however deep you want. So, in this last line here maybe it's hard to follow all the parentheses or whatever but we just have a pair whose first part is a pair of 'ints' and whose second part is two pairs of pairs of 'ints' sorry, it's a pair of a pair of 'ints' hard to talk about easy to program with and you can see the type written here. So that's tuples. \uff1a\u5df2\u6dfb\u52a0\u5230\u6240\u9009\u9879\u4e2d\u3002\u6309 [CTRL + S] \u53e6\u5b58\u4e3a\u6ce8\u91ca en \u200b</p>"},{"location":"course/programming_languages/partA/#chinese","title":"chinese","text":"<p>\u597d\u7684\uff0c\u5728\u8fd9\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u7814\u7a76\u7531\u66f4\u5c0f\u7684\u6570\u636e\u7247\u6bb5\u6784\u5efa\u7684\u6570\u636e\u548c\u673a\u5668\u5b66\u4e60\u3002\u6211\u4eec\u5c06\u4ece\u6210\u5bf9\u7684\u6570\u636e\u5f00\u59cb\u3002\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u6570\u5b57\u3001\u5e03\u5c14\u503c\uff0c\u8fd9\u4e9b\u90fd\u662f\u57fa\u672c\u7684\u6570\u636e\u503c\uff0c\u5e76\u4e14\u6211\u4eec\u5df2\u7ecf\u89c1\u8fc7\u7528\u5b83\u4eec\u7f16\u7a0b\u7684\u5404\u79cd\u65b9\u6cd5\uff0c\u6bd4\u5982\u6761\u4ef6\u8bed\u53e5\u3001\u53d8\u91cf\u6216\u51fd\u6570\u3002\u4f46\u662f\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u6784\u5efa\u5177\u6709\u591a\u4e2a\u5b57\u6bb5\u7684\u6570\u636e\u7ed3\u6784\u3002\u8fd9\u5728\u4efb\u4f55\u7f16\u7a0b\u8bed\u8a00\u4e2d\u90fd\u662f\u5fc5\u4e0d\u53ef\u5c11\u7684\u3002\u5982\u679c\u4f60\u7528\u8fc7\u50cfJava\u8fd9\u6837\u7684\u8bed\u8a00\u7f16\u7a0b\uff0c\u4f60\u53ef\u80fd\u7528\u8fc7\u5305\u542b\u591a\u4e2a\u90e8\u5206\u7684\u6570\u7ec4\uff0c\u6216\u8005\u7528\u8fc7\u5177\u6709\u591a\u4e2a\u5b57\u6bb5\u7684\u7c7b\u3002\u5728ML\u4e2d\uff0c\u6211\u4eec\u5c06\u91c7\u53d6\u4e00\u79cd\u975e\u5e38\u57fa\u7840\u7684\u65b9\u6cd5\u3002\u6211\u4eec\u5c06\u4ece\u5143\u7ec4\u5f00\u59cb\uff0c\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u76f4\u63a5\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u62e5\u6709\u56fa\u5b9a\u6570\u91cf\u7684\u4e0d\u540c\u6570\u636e\u9879\uff0c\u6bcf\u4e2a\u6570\u636e\u9879\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u7c7b\u578b\uff0c\u7136\u540e\u5728\u540e\u9762\u7684\u90e8\u5206\u4e2d\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u7528\u5217\u8868\u7f16\u7a0b\uff0c\u5217\u8868\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5177\u6709\u4efb\u610f\u957f\u5ea6\uff0c\u4f46\u6240\u6709\u90e8\u5206\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\u8fd9\u4e9b\u4e0d\u662f\u6211\u4eec\u5c06\u8981\u7814\u7a76\u7684\u552f\u4e00\u590d\u5408\u6570\u636e\u5f62\u5f0f\uff0c\u4f46\u5b83\u4eec\u8db3\u4ee5\u5b8c\u6210\u7b2c\u4e00\u4e2a\u4f5c\u4e1a\uff0c\u5e76\u4e14\u80fd\u8ba9\u6211\u4eec\u5f00\u59cb\u3002</p> <p>\u6211\u4eec\u5c06\u4ece\u5bf9\uff08pairs\uff09\u5f00\u59cb\uff0c\u6211\u5e0c\u671b\u4f60\u8fd9\u6837\u7406\u89e3\u5bf9\uff1a\u5b83\u4eec\u5c31\u662f\u6709\u4e24\u4e2a\u90e8\u5206\u7684\u4e1c\u897f\u3002\u56e0\u6b64\uff0c\u5728\u65b0\u8bed\u8a00\u7ed3\u6784\u65b9\u9762\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u6784\u5efa\u5bf9\u7684\u65b9\u6cd5\uff0c\u4ee5\u53ca\u4e00\u79cd\u8bbf\u95ee\u5bf9\u7684\u90e8\u5206\u7684\u65b9\u6cd5\u3002\u5728\u8fd9\u5f20\u5e7b\u706f\u7247\u4e0a\uff0c\u6211\u6709\u5bf9\u6784\u5efa\u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14\u6709\u5173\u4e8e\u5b83\u4eec\u7684\u4e09\u4e2a\u95ee\u9898\u7684\u7b54\u6848\u3002\u5728\u8bed\u6cd5\u65b9\u9762\uff0c\u6211\u4eec\u5c06\u5199\u4e24\u4e2a\u8868\u8fbe\u5f0f\u3002\u6211\u4eec\u5c06\u7528\u9017\u53f7\u5206\u9694\u5b83\u4eec\uff0c\u5e76\u5c06\u5b83\u4eec\u653e\u5728\u62ec\u53f7\u4e2d\uff0c\u8fd9\u5c31\u662f\u6784\u5efa\u5bf9\u7684\u8bed\u6cd5\u3002\u8bc4\u4f30\u89c4\u5219\u662f\u4ec0\u4e48\uff1f\u6211\u4eec\u5c06\u8981\u505a\u7684\u662f\u5c06'e1'\u8bc4\u4f30\u4e3a\u67d0\u4e2a\u503c\uff0c\u79f0\u4e4b\u4e3a'v1'\uff0c\u5c06'e2'\u8bc4\u4f30\u4e3a\u503c'v2'\uff0c\u7136\u540e\u8fd9\u5bf9\u503c\u5c06\u6210\u4e3a\u4e00\u4e2a\u503c\u3002\u56e0\u6b64\uff0c\u4e00\u79cd\u65b0\u7684\u503c\u7c7b\u578b\uff0c\u4e00\u79cd\u5df2\u7ecf\u5b8c\u6210\u8bc4\u4f30\u7684\u4e1c\u897f\uff0c\u662f\u4e00\u4e2a\u6301\u6709\u81ea\u8eab\u503c\u7684\u5bf9\u3002\u6211\u4eec\u4e5f\u6709\u8fd9\u4e9b\u5bf9\u7684\u65b0\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u5982\u679c'e1'\u6709\u4e00\u4e9b\u7c7b\u578b\uff0c\u6bd4\u5982'ta'\uff0c'e2'\u6709\u4e00\u4e9b\u7c7b\u578b\uff0c\u6bd4\u5982'tb'\uff0c\u90a3\u4e48\u5bf9\u8868\u8fbe\u5f0f\u5c06\u5177\u6709'ta * tb'\u7c7b\u578b\u3002\u56e0\u6b64\uff0c\u5c31\u50cf\u5bf9\u7684\u4e24\u4e2a\u90e8\u5206\u4e00\u6837\uff0c\u8fd9\u4e9b\u90e8\u5206\u7684\u7c7b\u578b\u7528\u661f\u53f7\u5206\u9694\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u6784\u5efa\u5bf9\u8868\u8fbe\u5f0f\u7684\u65b9\u5f0f\uff0c\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u8bbf\u95ee\u90e8\u5206\u5462\uff1f\u6211\u5c06\u5411\u4f60\u5c55\u793a\u672a\u6765\u7684\u4e0d\u540c\u65b9\u5f0f\uff0c\u4f46\u73b0\u5728\u8ba9\u6211\u4eec\u4f7f\u7528\u8fd9\u4e24\u79cd\u6784\u9020\uff1a'#1'\u548c\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c'#2'\u548c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u3002\u8bc4\u4f30\u89c4\u5219\u662f\u6211\u4eec\u5c06\u8bc4\u4f30\u90a3\u4e2a\u8868\u8fbe\u5f0f'e'\u4e3a\u67d0\u4e2a\u503c\uff0c\u5b83\u5c06\u662f\u4e00\u4e2a\u5bf9\uff0c\u7136\u540e'#1'\u5c06\u8fd4\u56de\u8be5\u5bf9\u7684\u7b2c\u4e00\u90e8\u5206\uff0c'#2'\u5c06\u8fd4\u56de\u8be5\u5bf9\u7684\u7b2c\u4e8c\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u5982\u679c'x'\u662f4\u548c17\u7684\u5bf9\uff0c\u6211\u4eec\u8bf4'#1'\u7684'x'\uff0c\u6211\u4eec\u5c06\u5f97\u52304\u3002\u7c7b\u578b\u68c0\u67e5\u7684\u5de5\u4f5c\u65b9\u5f0f\u7c7b\u4f3c\uff0c'e'\u5728\u90a3\u91cc\u6700\u597d\u6709\u4e00\u4e2a\u5bf9\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u6700\u597d\u662f\u4e00\u4e9b'ta * tb'\u3002\u5426\u5219\u8fd9\u4e2a\u8bbf\u95ee\u8868\u8fbe\u5f0f\u4e0d\u4f1a\u7c7b\u578b\u68c0\u67e5\uff0c\u7136\u540e'#1'\u7684'e'\u5c06\u5177\u6709\u7c7b\u578b'ta'\uff0c'#2'\u7684'e'\u5c06\u5177\u6709\u7c7b\u578b'tb'\u3002\u6240\u4ee5\u8fd9\u4e9b\u786e\u5b9e\u662f\u89c4\u5219\uff0c\u4f46\u50cf\u4efb\u4f55\u4e1c\u897f\u4e00\u6837\uff0c\u4f60\u5f80\u5f80\u901a\u8fc7\u7f16\u5199\u4e00\u4e9b\u7a0b\u5e8f\u5e76\u5c1d\u8bd5\u5b83\u4eec\u6765\u771f\u6b63\u7406\u89e3\u5b83\u4eec\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002</p> <p>\u8ba9\u6211\u4eec\u5199\u51e0\u4e2a\u63a5\u53d7\u6216\u8fd4\u56de\u5bf9\u7684\u51fd\u6570\u3002\u6211\u4ece\u4e00\u4e2a'swap'\u51fd\u6570\u5f00\u59cb\uff0c\u4e5f\u8bb8\u5b83\u63a5\u53d7\u4e00\u4e2a\u53c2\u6570\uff0c\u6211\u79f0\u4e4b\u4e3a'pr'\uff0c\u4e5f\u8bb8\u5b83\u5177\u6709\u7c7b\u578b'intbool'\uff0c\u6240\u4ee5\u5b83\u63a5\u53d7\u4e00\u4e2a\u4e1c\u897f\uff0c\u5176\u7b2c\u4e00\u90e8\u5206\u662f'int'\uff0c\u7b2c\u4e8c\u90e8\u5206\u662f'bool'\u3002\u4e5f\u8bb8\u6211\u60f3\u8981\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u65b0\u7684\u5bf9\uff0c\u6211\u6784\u5efa\u7b2c\u4e00\u90e8\u5206\u7528'#2'\u7684\u5bf9\uff0c\u7b2c\u4e8c\u90e8\u5206\u7528'#1'\u7684\u5bf9\u3002\u597d\u7684\u3002\u6211\u5c06\u5728\u4e00\u79d2\u949f\u5185\u5411\u4f60\u5c55\u793a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u8bf4\u660e\u5b83\u662f\u5982\u4f55\u5de5\u4f5c\u7684\u3002\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u5728\u8fd9\u91cc\u5199\u4e00\u4e9b\u5176\u4ed6\u51fd\u6570\u3002\u6211\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a\u5bf9\uff0c\u6bcf\u4e2a\u5bf9\u90fd\u6709\u7c7b\u578b'int * int'\uff0c\u5e76\u7b80\u5355\u5730\u5c06\u8fd9\u56db\u4e2a\u90e8\u5206\u76f8\u52a0\u3002\u6240\u4ee5\u6211\u60f3\u8981\u8fd4\u56de\u7684\u662f'#1'\u7684\u5bf9\u4e00\u52a0'#2'\u7684\u5bf9\u4e00\u3002\u6211\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u6293\u53d6\u8fd9\u56db\u4e2a\u90e8\u5206\u3002'#1'\u7684\u5bf9\u4e8c\u52a0'#2'\u7684\u5bf9\u4e8c\u3002\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u5408\u7406\u7684\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e24\u4e2a'int * int'\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2aint\u3002\u6240\u4ee5\u8fd9\u4e2a\u6574\u4f53\u7684\u7c7b\u578b\u5c06\u662f'(int * int) * (int * int)'\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a'int'\uff0c\u8ba9\u6211\u4eec\u5728\u6ce8\u91ca\u4e2d\u5199\u4e0a\u8fd9\u4e2a\u3002\u597d\u7684\uff1f\u8ba9\u6211\u4eec\u518d\u5199\u51e0\u4e2a\u3002\u54e6\uff0c\u8fd9\u91cc\u6709\u4e00\u4e2a\u6211\u771f\u7684\u5f88\u559c\u6b22\u7684\uff0c\u56e0\u4e3a\u8fd9\u5728\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u4e2d\u505a\u8d77\u6765\u5f88\u81ea\u7136\uff0c\u4f46\u5f88\u75db\u82e6\u3002\u8ba9\u6211\u4eec\u63a5\u53d7\u4e00\u4e2a\u5206\u5b50\u548c\u5206\u6bcdx\u548cy\uff0c\u6240\u4ee5\u53ea\u662f\u4e24\u4e2a\u7c7b\u578b\u4e3aint\u7684\u53c2\u6570\u3002\u8ba9\u6211\u4eec\u8fd4\u56dex\u9664\u4ee5y\u548cx\u9664\u4ee5y\u7684\u4f59\u6570\u3002\u73b0\u5728\u8fd9\u4e9b\u64cd\u4f5c\u7b26\u5728ML\u4e2d\u6709\u5947\u602a\u7684\u540d\u5b57\uff1bdiv\u548cmod\uff0c\u4f46\u6211\u4ecd\u7136\u53ef\u4ee5\u5199\u8fd9\u4e2a\u3002\u6211\u6240\u505a\u7684\u662f\u8fd4\u56de\u4e00\u4e2a\u7531\u4e24\u4e2a\u8868\u8fbe\u5f0f\u7ec4\u6210\u7684\u5bf9\uff0cx div y\u7684\u7ed3\u679c\u548cx mod y\u7684\u7ed3\u679c\uff0c\u6240\u4ee5\u8fd9\u4e2a\u51fd\u6570\u5c06\u63a5\u53d7\u4e24\u4e2a'ints' * 'int'\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a'ints'\u7684\u5bf9\u3002\u597d\u7684\u3002\u518d\u5199\u4e00\u4e2a\uff0c\u6211\u4eec\u63a5\u53d7\u4e00\u4e2a\u6574\u6570\u7684\u5bf9\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u6392\u5e8f\u3002\u6240\u4ee5\u6211\u4eec\u8fd4\u56de\u4e00\u4e2a'int' * 'int'\u7684\u5bf9\uff0c\u5982\u679c\u5bf9\u7684\u7b2c\u4e00\u90e8\u5206\u5c0f\u4e8e\u5bf9\u7684\u7b2c\u4e8c\u90e8\u5206\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8fd4\u56de\u6211\u4eec\u5f00\u59cb\u7684\u5bf9\uff0c\u56e0\u4e3a\u5b83\u5df2\u7ecf\u6392\u5e8f\u4e86\u3002\u5426\u5219\uff0c\u8ba9\u6211\u4eec\u4ea4\u6362\u5b83\u5e76\u8fd4\u56de'#2'\u7684\u5bf9\uff0c'#1'\u7684\u5bf9\u3002\u597d\u7684\uff1f\u6240\u4ee5\u8fd9\u4f3c\u4e4e\u662f\u4e00\u7ec4\u5f88\u597d\u7684\u793a\u4f8b\u51fd\u6570\u3002\u8ba9\u6211\u4eec\u5feb\u901f\u56de\u5230\u8fd9\u91cc\uff0c\u786e\u4fdd\u6211\u5b9e\u9645\u4e0a\u5199\u5bf9\u4e86\uff0c\u5b83\u4eec\u52a0\u8f7d\u5230\u8fd9\u91cc\uff0c\u597d\u7684\u3002\u6211\u4eec\u770b\u5230swap\u5177\u6709\u7c7b\u578b'int''bool'\u7bad\u5934'bool''int'\u3002\u6240\u4ee5\u6211\u5c1d\u8bd5\u4e00\u4e0b\uff0c\u6211\u5c1d\u8bd5\u75287\u548ctrue\u8c03\u7528\u5b83\uff0c\u6211\u5f97\u5230true 7\uff0c\u5982\u679c\u6211\u7528-4\u548cfalse\u8c03\u7528\u5b83\uff0c\u5e94\u8be5\u5f97\u5230false\u548c-4\u3002\u73b0\u5728\uff0c\u4f60\u53ef\u80fd\u4f1a\u60f3\uff0cML\u600e\u4e48\u77e5\u9053\u6211\u662f\u5728\u7528\u4e00\u4e2a\u5bf9\u8c03\u7528\u5b83\uff0c\u800c\u4e0d\u662f\u7528\u4e24\u4e2a\u53c2\u6570\u8c03\u7528\u5b83\u3002\u55ef\uff0c\u5728\u672a\u6765\u7684\u8bb2\u5ea7\u4e2d\uff0c\u6211\u5c06\u5411\u4f60\u5c55\u793aML\u5b9e\u9645\u4e0a\u662f\u5b8c\u5168\u76f8\u540c\u7684\u4e1c\u897f\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u5c06\u628a\u5b83\u4eec\u4f5c\u4e3a\u5355\u72ec\u7684\u6982\u5ff5\u4fdd\u7559\u3002\u8ba9\u6211\u518d\u8bd5\u4e00\u4e2a\uff0c\u6bd4\u5982\u5bf9(3,4)\u8fdb\u884c\u6392\u5e8f\u3002\u6211\u76f4\u63a5\u5f97\u5230\u5bf9(3,4)\uff0c\u7c7b\u578b\u4e3a'int''int'\uff0c\u5982\u679c\u6211\u6709\u4e00\u4e2a\u503c\u662f(4,3)\uff0c\u7136\u540e\u6211\u8bf4\u5bf9x\u8fdb\u884c\u6392\u5e8f\uff0c\u5b83\u4f1a\u8fd4\u56de(3,4)\u3002\u5f53\u7136\uff0c\u6211\u4e5f\u53ef\u4ee5\u76f4\u63a5\u95ee\u5bf9(4,3)\u8fdb\u884c\u6392\u5e8f\uff0c\u6211\u4f1a\u5f97\u5230\u540c\u6837\u7684\u7b54\u6848\u3002\u597d\u7684\u3002\u8fd9\u5c31\u662f\u7528\u5bf9\u7f16\u7a0b\u3002\u8ba9\u6211\u4eec\u56de\u5230\u5e7b\u706f\u7247\u4e0a\uff0c\u5411\u4f60\u5c55\u793a\u867d\u7136\u8fd9\u786e\u5b9e\u662f\u5bf9\u7684\u5168\u90e8\u5185\u5bb9\uff0c\u4f46\u6211\u4eec\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5c06\u5bf9\u7684\u6982\u5ff5\u63a8\u5e7f\u5230\u5143\u7ec4\u3002\u6240\u4ee5\u4e00\u4e2a\u5bf9\u53ea\u662f\u4e00\u4e2a\u4e8c\u5143\u7ec4\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u4f60\u53ef\u4ee5\u6709\u4efb\u610f\u6570\u91cf\u7684\u90e8\u5206\u3002\u56e0\u6b64\uff0c\u8981\u6784\u5efa\u4e00\u4e2a\u6709n\u4e2a\u90e8\u5206\u7684\u5143\u7ec4\uff0c\u4f60\u53ea\u9700\u8981\u7528\u9017\u53f7\u5206\u9694\u7684n\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8fd9\u4e2a\u4e1c\u897f\u7684\u7c7b\u578b\u5c06\u662f\u6240\u6709\u8868\u8fbe\u5f0f\u7684\u7c7b\u578b\u7528\u661f\u53f7\u5206\u9694\uff0c\u6216\u8005\u50cf'int''int''int'\u8fd9\u6837\u7684\u4e09\u5143\u7ec4\uff0c\u6bcf\u4e2a\u90e8\u5206\u90fd\u662f'int'\uff0c\u4f60\u7528'#1 e, #2 e, #3 e'\u7b49\u7b49\u6765\u8bbf\u95ee\u90e8\u5206\u3002\u6240\u4ee5\u4f60\u4f1a\u5728\u8fd9\u4e2a\u4e0a\u6709\u5f88\u591a\u7ecf\u9a8c\uff0c\u56e0\u4e3a'int''intint'\u786e\u5b9e\u662f\u7b2c\u4e00\u4e2a\u4f5c\u4e1a\u4e2d\u8bb8\u591a\u95ee\u9898\u7684\u5e38\u89c1\u7c7b\u578b\u3002\u6211\u8fd8\u60f3\u5f3a\u8c03\uff0c\u4e0d\u9700\u8981\u5411\u6211\u4eec\u7684\u8bed\u8a00\u6dfb\u52a0\u4efb\u4f55\u65b0\u4e1c\u897f\uff0c\u6211\u5df2\u7ecf\u5411\u4f60\u5c55\u793a\u7684\u89c4\u5219\u3002\u4f60\u53ef\u4ee5\u5c06\u5143\u7ec4\u548c\u5176\u4ed6\u7c7b\u578b\u7684\u8868\u8fbe\u5f0f\u5d4c\u5957\u5230\u4f60\u559c\u6b22\u7684\u6df1\u5ea6\u3002\u6240\u4ee5\uff0c\u6211\u5728\u5e7b\u706f\u7247\u4e0a\u6709\u51e0\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b83\u4eec\u8f93\u5165\u5230\u91cd\u65b0\u5f00\u53d1\u7684\u6253\u5370\u5faa\u73af\u6216ML\u6587\u4ef6\u4e2d\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u51997\u9017\u53f7\uff0c\u7136\u540e\u5728\u5b83\u81ea\u5df1\u7684\u5bf9\u4e2d\u5199true\u9017\u53f79\u3002\u8fd9\u5c06\u662f\u4e00\u4e2a\u5bf9\uff0c\u5176\u4e2d\u7b2c\u4e00\u90e8\u5206\u5177\u6709\u7c7b\u578b'int'\uff0c\u7b2c\u4e8c\u90e8\u5206\u4e5f\u662f\u4e00\u4e2a\u5bf9\uff0c\u7c7b\u578b\u4e3a('bool''int')\u3002\u6240\u4ee5\u6574\u4f53\u7684\u7c7b\u578b\u662f('int')\u62ec\u53f7('bool''int')\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u53d6\u90a3\u4e2ax1\uff0c\u7136\u540e\u5bf9\u5b83\u5e94\u7528\u54c8\u5e0c\u64cd\u4f5c(#2 x1)\uff0c\u5c06\u8fd4\u56de\u4e00\u4e2a('bool''int')\u3002\u6240\u4ee5\u5982\u679c\u6211\u4eec\u7136\u540e\u6dfb\u52a0#1\u7684\u90a3\u4e2a\uff0c\u6240\u4ee5#1\u7684#2\u7684x1\uff0c\u90a3\u5c06\u7ed9\u4f60\u8fd4\u56de\u4e00\u4e2a\u7c7b\u578b\u4e3abool\u7684\u4e1c\u897f\uff0c\u5b9e\u9645\u4e0ax2\u5c06\u8bc4\u4f30\u4e3atrue\u3002\u7c7b\u4f3c\u5730\uff0cx3\uff0c\u5373\u8fd9\u4e2a#2\u7684x1\uff0c\u662f\u5b8c\u5168\u6709\u610f\u4e49\u7684\u3002\u6211\u4eec\u5728\u73af\u5883\u4e2d\u67e5\u627eX1\uff0c\u5f97\u5230(7, (true, 9))\uff0c\u6211\u4eec\u505a#2\u7684\u90a3\u4e2a\uff0c\u6211\u4eec\u5c06\u5f97\u5230(true, 9)\uff0c\u8fd9\u662f\u4e00\u4e2a\u5b8c\u5168\u5408\u7406\u7684\u7c7b\u578b\u4e3a('bool'*'int')\u7684\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7ed1\u5b9a\u5230x3\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u4e1c\u897f\u53ef\u4ee5\u5d4c\u5957\u5230\u4f60\u60f3\u8981\u7684\u6df1\u5ea6\u3002\u6240\u4ee5\uff0c\u5728\u8fd9\u6700\u540e\u4e00\u884c\uff0c\u4e5f\u8bb8\u5f88\u96be\u8ddf\u8e2a\u6240\u6709\u7684\u62ec\u53f7\u6216\u5176\u4ed6\u4ec0\u4e48\uff0c\u4f46\u6211\u4eec\u53ea\u662f\u6709\u4e00\u4e2a\u5bf9\uff0c\u5176\u7b2c\u4e00\u90e8\u5206\u662f\u4e00\u4e2a'int'\u7684\u5bf9\uff0c\u5176\u7b2c\u4e8c\u90e8\u5206\u662f\u4e24\u4e2a'int'\u7684\u5bf9\u7684\u5bf9\uff0c\u62b1\u6b49\uff0c\u662f\u4e00\u4e2a'int'\u7684\u5bf9\u7684\u5bf9\uff0c\u5f88\u96be\u8c08\u8bba\uff0c\u4f46\u5f88\u5bb9\u6613\u7f16\u7a0b\uff0c\u4f60\u53ef\u4ee5\u770b\u5230\u8fd9\u91cc\u5199\u7684\u7c7b\u578b\u3002\u6240\u4ee5\u8fd9\u5c31\u662f\u5143\u7ec4\u3002</p>"},{"location":"course/programming_languages/partA/#list","title":"list","text":""},{"location":"course/programming_languages/partA/#english_1","title":"english","text":"<p>In this segment we'll start studying lists. Right now we're just going to learn the basic rules for them, and then in the next segment, we'll program with functions that either take lists or produce lists, just to break things into slightly smaller pieces. we've already seen one way to build up compound data, and that was with tuples, and they're a nice contrast with lists. Tuples, even though we can make them as wide as we wanted or as deep as we wanted, touples inside of touples. We still had to pick that size when we were writing the program. So there was no way with tuples, as they take in a number like 10, or n, or x, and then produce a tuple that had that many pieces, because there be no type to write down for that thing, because you don't know the size until you run the program. So lists don't have that restriction. We're going to be able to build lists with any number of elements and we won't be limited by the type of the list. But there's a tradeoff here, and that is that any list we build will have to have pieces that all have the same type. And that's just the rule for lists in ML, and we'll learn in future a segments and parts of the course how to program around that restriction by using other concerts of the language. Alright, so to understand lists just like with tuples, we're going to have ways to build them and we're going to have ways to use them. So let's start with how we can build lists. The simplest list has zero elements in it, and you build that zero element list by just writing left bracket, right bracket. This is itself a value, so the evaluation rule is trivial. The syntax evaluates to itself, and that's the empty list. Now, if you wanted a list with multiple elements in it, you can just write those down seperated by commas. So let me show you a few examples here so I can really write the empy list, and that's its value. You see the type there, quote A list. We'll get back to that in a few minutes. Let's ignore that for now. I could also make a list three, four, five, and that would hold three, four, five. You can see from the type here. It's a list of, of ints, so it doesn't matter how many elements are in it. A two-element list has the same number, has the same type and so does a four-element list, and so on. these are all values because a list of values is a value. But, I could put expressions in here, three plus four seven, like this and it will evaluate each of those. So, this is the list holding a three and then a seven and then a seven. You don't have to have lists of integers you can have list of Booleans as well. So here's a three element bool list, but you can't mix them. So if I had something like three, four plus five, true, than that's going to give a type error, the same way four plus true gives a type error. All the elements of the list have to have the same type. Of course these are just values, I combined a list to a variable and so on. Okay, so there's one other way to build lists, which is very useful, and that's using this colon, colon operation, which I'll pronounce cons, for constructing a list. Cons, C, O, N, S, and here's how it works. All it does is evaluate e one to some value. E2 to some value that is itself a list. And then it makes a list that has one more element than that list E2 evaluated to. Mainly it puts the result of E1 on the front of the list. So if I flip back here, remember, X is this list 789 I could say five cons onto X. Now it produced the list 5789. You can even say six cons don to five cons don to x. The parenthesis would go like this, you don't actually need them. and that would be 6, 5, 7, 8, 9, and so on. Alright? One thing you can't do is something like this, alright, and that just doesn't type check, and that's because we're trying to take a list of integers, namely the list holding six, and put that on the front of a list of integers. And a list of integers can't hold a list of integers. It is a list of integers, so this is the correct thing to do. You can have a list of a list of integers, so I could cons that six onto a list of list of integers, maybe like this. Alright, and now indeed, I have a list holding three lists of integers. The first is the list six, the second the list 7, 5, and third the list 5, 2. Alright, so that's how to build lists, now how about using them. Well, we need a way to access the pieces, and we need to know a way to find out if our list is empty or not, because if you try to access the pieces of an empty list, you get a runtime error. So let's do that test first. There's a function in ML called null, n, u, l, l. Do not think of this like the null in Java or C+++ or any number of other languages. This is a function that takes a list as an argument and returns true if that list is empty and false otherwise. So for example, if I ask null of X, I'll get false because remember, X is not the empty list, but if I ask null of the empty list I get true and indeed if some other list was empty and I asked null of that, I would get true. So, once you know a list is not empty, it's reasonable to ask for its head, the first element of the list, or it's tail, which is the list, which is all the elements except the first one. And these are the two operations we are going to use to access the pieces of the list. So the head function, spelled HD, just takes a list and returns the first element. The tail function takes a list and returns all the other elements. Alright? So these are just functions. So I can just call them like any other functions. So if I ask for head of X, I get seven cause remember X is this example list, 7-8-9. I can ask tail of X, that will give me back the list 8-9. If I wanted the first element of that list, I'd have to ask head of tail of X, then I would get eight. Can ask of course, also get tail of tail of X. That would be the one element list nine. You could also ask tail of tail of tail of X. What's the tail of a one M element list? It's the zero element list. So this is the empty list. Now if you asked head or tail of that, that would type check just fine, that if I actually evaluate this, I get an uncaught exception for trying to take head or tail of the empty list. I get the same thing if I use head. Alright. So that's accessing the pieces of lists. We've really focused here on the syntax and the evaluation rules. So now let's switch to talking a little more of the types of lists and the types of functions for making them and using them. So, just like when we had a tuples, we had a new way of writing types. So int star int was a pair of ints for example. We have a new types for lists. So for any type t, the type t space list describes the values that are lists holding key elements in them. So, as we've seen in the examples, int list is a list of int. bool list is a list of bools, and so on. Now these things can nest, I think I've shown you a little bit of this, if I make a list of pairs events. That's fine, that's an int star int list. It's a list whose elements have type int star int. So I try to do something like cons, three onto that, it won't type check, but if I try to cons a pair of ints onto that, will type check just fine. Alright, so you can nest these things however you want. You could have a list with another list of ints inside of it. I've shown you one of those. You can have a list with a pair in it and where that pair has a list inside of it and so on. All right, but what about the types of the operations I've given you for building lists and accessing lists? So probably the hardest one to understand is the type of the empty list. So I've showed you before, this has the type written quote, a space list. And I always pronounce quote a as alpha, like the Greek letter. So we say that the empty list has type alpha lists. What that actually means is that you can replace that alpha with any type you want. So the empty list can have type int list, but it can also have type bool list, and it can also have type int star int list, and so on. And that's good, because that's what let's us cons three onto the empty list to get an in list or true onto the empty list to get a bool list. So, the empty list is a special thing that can have lots of types. Its type is alpha list that lets it also have type T list for any type T. Alright, so we're going to see that as a theme with these other operations as well. The cons operator also works for any kind of list. The rule is E2 has to have type t list for some t, and then E1 has to have type t, because you have to add something of the correct type onto the list you started with. Then we have our operations for accessing list, testing if they're empty, getting their head, getting their tail, and these really are just functions in ML. So I have their types written here but we can also see that the read eval print \u4ece :9:19 \u5f00\u59cb\u64ad\u653e\u89c6\u9891\u5e76\u5b66\u4e60\u811a\u672c9:19 loop. So null is just a function. Again, it's nothing like null in other languages, that takes in a list of any type alpha. So for all types alpha, you can take in an alpha list, and we'll give you back true or false. And that's why I can't ask null with a list of integers or with a list of Booleans. In a couple sections later in the course, we'll learn how to write our own functions that have types with these alphas in it, and other Greek letters if you like, but for now we're just going to use ones provided to us by the ml language. Similarly head takes in a list of alphas for any type alpha, and what you get back is an alpha. That's why, if you call head with a list of integers, you get back an integer, and if you call it with a list of Booleans, you get back a Boolean. And finally, tail takes a list and returns a list, alpha list to alpha list, and those two type, lists, have to have the same type, which is why, if I say tail of 3,4, I get an int list back, because I passed it in int list. Alright? So now we know our key operations for building lists and accessing lists. What we'll do next is a very powerful, very common thing in functional programming, which is to write useful functions that take in return lists.</p>"},{"location":"course/programming_languages/partA/#chinese_1","title":"Chinese","text":"<p>\u5728\u8fd9\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u5f00\u59cb\u7814\u7a76\u5217\u8868\u3002\u73b0\u5728\u6211\u4eec\u53ea\u662f\u8981\u5b66\u4e60\u5b83\u4eec\u7684\u57fa\u672c\u89c4\u5219\uff0c\u7136\u540e\u5728\u4e0b\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u7528\u51fd\u6570\u7f16\u7a0b\uff0c\u8fd9\u4e9b\u51fd\u6570\u8981\u4e48\u63a5\u53d7\u5217\u8868\uff0c\u8981\u4e48\u4ea7\u751f\u5217\u8868\uff0c\u53ea\u662f\u4e3a\u4e86\u628a\u4e8b\u60c5\u5206\u6210\u7a0d\u5fae\u5c0f\u4e00\u70b9\u7684\u5757\u3002\u6211\u4eec\u5df2\u7ecf\u770b\u5230\u4e86\u4e00\u79cd\u6784\u5efa\u590d\u5408\u6570\u636e\u7684\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\u7528\u5143\u7ec4\uff0c\u5b83\u4eec\u4e0e\u5217\u8868\u5f62\u6210\u4e86\u5f88\u597d\u7684\u5bf9\u6bd4\u3002\u5143\u7ec4\uff0c\u5c3d\u7ba1\u6211\u4eec\u53ef\u4ee5\u4f7f\u5b83\u4eec\u5c3d\u53ef\u80fd\u5bbd\u6216\u5c3d\u53ef\u80fd\u6df1\uff0c\u5143\u7ec4\u5185\u90e8\u7684\u5143\u7ec4\u3002\u6211\u4eec\u4ecd\u7136\u5fc5\u987b\u5728\u7f16\u5199\u7a0b\u5e8f\u65f6\u9009\u62e9\u90a3\u4e2a\u5927\u5c0f\u3002\u6240\u4ee5\u7528\u5143\u7ec4\uff0c\u5f53\u5b83\u4eec\u63a5\u53d7\u4e00\u4e2a\u6570\u5b57\uff0c\u6bd4\u598210\uff0c\u6216\u8005n\uff0c\u6216\u8005x\uff0c\u7136\u540e\u4ea7\u751f\u4e00\u4e2a\u6709\u90a3\u4e48\u591a\u90e8\u5206\u7684\u5143\u7ec4\uff0c\u56e0\u4e3a\u6ca1\u6709\u7c7b\u578b\u53ef\u4ee5\u5199\u4e0b\u6765\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u5927\u5c0f\uff0c\u76f4\u5230\u4f60\u8fd0\u884c\u7a0b\u5e8f\u3002\u6240\u4ee5\u5217\u8868\u6ca1\u6709\u8fd9\u4e2a\u9650\u5236\u3002\u6211\u4eec\u5c06\u80fd\u591f\u6784\u5efa\u5177\u6709\u4efb\u610f\u6570\u91cf\u5143\u7d20\u7684\u5217\u8868\uff0c\u5e76\u4e14\u6211\u4eec\u4e0d\u4f1a\u53d7\u5230\u5217\u8868\u7c7b\u578b\u7684\u9650\u5236\u3002\u4f46\u8fd9\u91cc\u6709\u4e00\u4e2a\u6743\u8861\uff0c\u90a3\u5c31\u662f\u6211\u4eec\u6784\u5efa\u7684\u4efb\u4f55\u5217\u8868\u90fd\u5fc5\u987b\u6709\u76f8\u540c\u7c7b\u578b\u7684\u90e8\u5206\u3002\u8fd9\u53ea\u662fML\u4e2d\u5217\u8868\u7684\u89c4\u5219\uff0c\u6211\u4eec\u5c06\u5728\u672a\u6765\u7684\u90e8\u5206\u548c\u8bfe\u7a0b\u7684\u90e8\u5206\u5b66\u4e60\u5982\u4f55\u901a\u8fc7\u4f7f\u7528\u8bed\u8a00\u7684\u5176\u4ed6\u6982\u5ff5\u6765\u7ed5\u8fc7\u8fd9\u4e2a\u9650\u5236\u3002\u597d\u7684\uff0c\u6240\u4ee5\u4e3a\u4e86\u7406\u89e3\u5217\u8868\uff0c\u5c31\u50cf\u7528\u5143\u7ec4\u4e00\u6837\uff0c\u6211\u4eec\u5c06\u6709\u6784\u5efa\u5b83\u4eec\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u5c06\u6709\u4f7f\u7528\u5b83\u4eec\u7684\u65b9\u6cd5\u3002\u8ba9\u6211\u4eec\u4ece\u6211\u4eec\u5982\u4f55\u6784\u5efa\u5217\u8868\u5f00\u59cb\u3002\u6700\u7b80\u5355\u7684\u5217\u8868\u6709\u96f6\u4e2a\u5143\u7d20\uff0c\u4f60\u901a\u8fc7\u5199\u5de6\u62ec\u53f7\uff0c\u53f3\u62ec\u53f7\u6765\u6784\u5efa\u90a3\u4e2a\u96f6\u5143\u7d20\u5217\u8868\u3002\u8fd9\u662f\u4e00\u4e2a\u503c\uff0c\u6240\u4ee5\u8bc4\u4f30\u89c4\u5219\u662f\u5fae\u4e0d\u8db3\u9053\u7684\u3002\u8bed\u6cd5\u8bc4\u4f30\u4e3a\u81ea\u8eab\uff0c\u8fd9\u5c31\u662f\u7a7a\u5217\u8868\u3002\u73b0\u5728\uff0c\u5982\u679c\u4f60\u60f3\u8981\u4e00\u4e2a\u6709\u591a\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u4f60\u53ef\u4ee5\u53ea\u5199\u90a3\u4e9b\u7528\u9017\u53f7\u5206\u9694\u7684\u5143\u7d20\u3002\u8ba9\u6211\u5728\u8fd9\u91cc\u7ed9\u4f60\u770b\u51e0\u4e2a\u4f8b\u5b50\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5\u771f\u6b63\u5199\u7a7a\u5217\u8868\uff0c\u8fd9\u5c31\u662f\u5b83\u7684\u503c\u3002\u4f60\u770b\u5230\u90a3\u91cc\u7684\u7c7b\u578b\uff0c\u5f15\u53f7A\u5217\u8868\u3002\u6211\u4eec\u51e0\u5206\u949f\u540e\u4f1a\u56de\u5230\u90a3\u4e2a\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u5ffd\u7565\u8fd9\u4e00\u70b9\u3002\u6211\u4e5f\u53ef\u4ee5\u505a\u4e00\u4e2a\u5217\u8868\u4e09\uff0c\u56db\uff0c\u4e94\uff0c\u90a3\u5c06\u6301\u6709\u4e09\uff0c\u56db\uff0c\u4e94\u3002\u4f60\u53ef\u4ee5\u4ece\u8fd9\u91cc\u7684\u7c7b\u578b\u770b\u5230\u3002\u8fd9\u662f\u4e00\u4e2a\u6574\u6570\u7684\u5217\u8868\uff0c\u6240\u4ee5\u4e0d\u7ba1\u5b83\u6709\u591a\u5c11\u5143\u7d20\u3002\u4e00\u4e2a\u4e24\u5143\u7d20\u5217\u8868\u6709\u76f8\u540c\u7684\u6570\u5b57\uff0c\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u4e00\u4e2a\u56db\u5143\u7d20\u5217\u8868\u4e5f\u662f\u5982\u6b64\uff0c\u7b49\u7b49\u3002\u8fd9\u4e9b\u90fd\u662f\u503c\uff0c\u56e0\u4e3a\u503c\u7684\u5217\u8868\u662f\u4e00\u4e2a\u503c\u3002\u4f46\u662f\uff0c\u6211\u53ef\u4ee5\u5728\u8fd9\u91cc\u653e\u8868\u8fbe\u5f0f\uff0c\u4e09\u52a0\u56db\u4e03\uff0c\u50cf\u8fd9\u6837\uff0c\u5b83\u4f1a\u8bc4\u4f30\u6bcf\u4e00\u4e2a\u3002\u6240\u4ee5\uff0c\u8fd9\u662f\u6301\u6709\u4e09\uff0c\u7136\u540e\u4e03\uff0c\u7136\u540e\u4e03\u7684\u5217\u8868\u3002\u4f60\u4e0d\u5fc5\u6709\u6574\u6570\u5217\u8868\uff0c\u4f60\u4e5f\u53ef\u4ee5\u6709\u5e03\u5c14\u5217\u8868\u3002\u6240\u4ee5\u8fd9\u91cc\u6709\u4e00\u4e2a\u4e09\u5143\u7d20\u5e03\u5c14\u5217\u8868\uff0c\u4f46\u4f60\u4e0d\u80fd\u6df7\u5408\u5b83\u4eec\u3002\u6240\u4ee5\u5982\u679c\u6211\u6709\u4e09\uff0c\u56db\u52a0\u4e94\uff0c\u771f\uff0c\u90a3\u4e48\u8fd9\u5c06\u7ed9\u51fa\u4e00\u4e2a\u7c7b\u578b\u9519\u8bef\uff0c\u5c31\u50cf\u56db\u52a0\u771f\u7ed9\u51fa\u7c7b\u578b\u9519\u8bef\u4e00\u6837\u3002\u5217\u8868\u7684\u6240\u6709\u5143\u7d20\u5fc5\u987b\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\u5f53\u7136\uff0c\u8fd9\u4e9b\u53ea\u662f\u503c\uff0c\u6211\u53ef\u4ee5\u5c06\u5217\u8868\u7ec4\u5408\u5230\u4e00\u4e2a\u53d8\u91cf\u7b49\u7b49\u3002\u597d\u7684\uff0c\u6240\u4ee5\u8fd8\u6709\u53e6\u4e00\u79cd\u6784\u5efa\u5217\u8868\u7684\u65b9\u6cd5\uff0c\u8fd9\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u90a3\u5c31\u662f\u4f7f\u7528\u8fd9\u4e2a\u5192\u53f7\uff0c\u5192\u53f7\u64cd\u4f5c\uff0c\u6211\u4f1a\u53d1\u97f3\u4e3acons\uff0c\u7528\u4e8e\u6784\u5efa\u5217\u8868\u3002Cons\uff0cC\uff0cO\uff0cN\uff0cS\uff0c\u8fd9\u5c31\u662f\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u3002\u5b83\u6240\u505a\u7684\u5c31\u662f\u8bc4\u4f30e1\u4e3a\u67d0\u4e2a\u503c\u3002E2\u4e3a\u67d0\u4e2a\u503c\uff0c\u5b83\u672c\u8eab\u662f\u4e00\u4e2a\u5217\u8868\u3002\u7136\u540e\u5b83\u5236\u4f5c\u4e00\u4e2a\u6bd4\u90a3\u4e2a\u5217\u8868E2\u8bc4\u4f30\u7684\u5217\u8868\u591a\u4e00\u4e2a\u5143\u7d20\u7684\u5217\u8868\u3002\u4e3b\u8981\u662f\u5728\u5217\u8868\u7684\u524d\u9762\u52a0\u4e0aE1\u7684\u7ed3\u679c\u3002\u6240\u4ee5\u5982\u679c\u6211\u7ffb\u56de\u6765\uff0c\u8bb0\u4f4f\uff0cX\u662f\u8fd9\u4e2a\u5217\u8868789\u6211\u53ef\u4ee5\u8bf4\u4e94cons\u5230X\u3002\u73b0\u5728\u5b83\u4ea7\u751f\u4e86\u5217\u88685789\u3002\u4f60\u751a\u81f3\u53ef\u4ee5\u8bf4\u516dcons\u5230\u4e94cons\u5230x\u3002\u62ec\u53f7\u4f1a\u50cf\u8fd9\u6837\uff0c\u4f60\u5b9e\u9645\u4e0a\u4e0d\u9700\u8981\u5b83\u4eec\u3002\u90a3\u5c31\u662f6\uff0c5\uff0c7\uff0c8\uff0c9\uff0c\u7b49\u7b49\u3002\u597d\u7684\uff1f\u4f60\u4e0d\u80fd\u505a\u7684\u662f\u8fd9\u6837\u7684\u4e8b\u60c5\uff0c\u597d\u7684\uff0c\u90a3\u53ea\u662f\u7c7b\u578b\u68c0\u67e5\uff0c\u90a3\u662f\u56e0\u4e3a\u6211\u4eec\u8bd5\u56fe\u53d6\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0c\u5373\u6301\u6709\u516d\u7684\u5217\u8868\uff0c\u5e76\u5c06\u5176\u653e\u5728\u4e00\u4e2a\u6574\u6570\u5217\u8868\u7684\u524d\u9762\u3002\u800c\u4e00\u4e2a\u6574\u6570\u5217\u8868\u4e0d\u80fd\u6301\u6709\u6574\u6570\u5217\u8868\u3002\u5b83\u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\uff0c\u6240\u4ee5\u8fd9\u662f\u6b63\u786e\u7684\u4e8b\u60c5\u8981\u505a\u3002\u4f60\u53ef\u4ee5\u6709\u4e00\u4e2a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\uff0c\u6240\u4ee5\u6211\u53ef\u4ee5cons\u90a3\u4e2a\u516d\u5230\u4e00\u4e2a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\uff0c\u4e5f\u8bb8\u50cf\u8fd9\u6837\u3002\u597d\u7684\uff0c\u73b0\u5728\u786e\u5b9e\uff0c\u6211\u6709\u4e00\u4e2a\u6301\u6709\u4e09\u4e2a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\u3002\u7b2c\u4e00\u4e2a\u662f\u5217\u8868\u516d\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5217\u88687\uff0c5\uff0c\u7b2c\u4e09\u4e2a\u662f\u5217\u88685\uff0c2\u3002\u597d\u7684\uff0c\u8fd9\u5c31\u662f\u5982\u4f55\u6784\u5efa\u5217\u8868\uff0c\u73b0\u5728\u5982\u4f55\u4f7f\u7528\u5b83\u4eec\u3002\u6211\u4eec\u9700\u8981\u4e00\u79cd\u8bbf\u95ee\u90e8\u5206\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053\u4e00\u79cd\u627e\u51fa\u6211\u4eec\u7684\u5217\u8868\u662f\u5426\u4e3a\u7a7a\u7684\u65b9\u6cd5\uff0c\u56e0\u4e3a\u5982\u679c\u4f60\u8bd5\u56fe\u8bbf\u95ee\u7a7a\u5217\u8868\u7684\u90e8\u5206\uff0c\u4f60\u4f1a\u5f97\u5230\u4e00\u4e2a\u8fd0\u884c\u65f6\u9519\u8bef\u3002\u6240\u4ee5\u8ba9\u6211\u4eec\u5148\u505a\u90a3\u4e2a\u6d4b\u8bd5\u3002ML\u4e2d\u6709\u4e00\u4e2a\u51fd\u6570\u53eb\u505anull\uff0cn\uff0cu\uff0cl\uff0cl\u3002\u4e0d\u8981\u8ba4\u4e3a\u8fd9\u5c31\u50cfJava\u6216C+++\u6216\u5176\u4ed6\u8bb8\u591a\u8bed\u8a00\u4e2d\u7684null\u3002\u8fd9\u662f\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\u4f5c\u4e3a\u53c2\u6570\uff0c\u5982\u679c\u8be5\u5217\u8868\u4e3a\u7a7a\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6211\u95eenull\u7684X\uff0c\u6211\u4f1a\u5f97\u5230false\uff0c\u56e0\u4e3a\u8bb0\u4f4f\uff0cX\u4e0d\u662f\u7a7a\u5217\u8868\uff0c\u4f46\u5982\u679c\u6211\u95eenull\u7684\u7a7a\u5217\u8868\uff0c\u6211\u5f97\u5230true\uff0c\u786e\u5b9e\uff0c\u5982\u679c\u5176\u4ed6\u5217\u8868\u662f\u7a7a\u7684\uff0c\u6211\u95eenull\u7684\u90a3\u4e2a\uff0c\u6211\u4f1a\u5f97\u5230true\u3002\u6240\u4ee5\uff0c\u4e00\u65e6\u4f60\u77e5\u9053\u4e00\u4e2a\u5217\u8868\u4e0d\u662f\u7a7a\u7684\uff0c\u95ee\u5b83\u7684\u5934\uff0c\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6216\u8005\u5b83\u7684\u5c3e\uff0c\u8fd9\u662f\u5217\u8868\uff0c\u8fd9\u662f\u9664\u4e86\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u5916\u7684\u6240\u6709\u5143\u7d20\uff0c\u8fd9\u662f\u5408\u7406\u7684\u3002\u8fd9\u662f\u6211\u4eec\u5c06\u7528\u6765\u8bbf\u95ee\u5217\u8868\u90e8\u5206\u7684\u4e24\u4e2a\u64cd\u4f5c\u3002\u6240\u4ee5\u5934\u51fd\u6570\uff0c\u62fc\u5199\u4e3aHD\uff0c\u53ea\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\u5e76\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u5c3e\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\u5e76\u8fd4\u56de\u6240\u6709\u5176\u4ed6\u5143\u7d20\u3002\u597d\u7684\uff1f\u6240\u4ee5\u8fd9\u4e9b\u53ea\u662f\u51fd\u6570\u3002\u6240\u4ee5\u6211\u53ef\u4ee5\u50cf\u4efb\u4f55\u5176\u4ed6\u51fd\u6570\u4e00\u6837\u8c03\u7528\u5b83\u4eec\u3002\u6240\u4ee5\u5982\u679c\u6211\u95ee\u5934\u7684X\uff0c\u6211\u5f97\u5230\u4e03\uff0c\u56e0\u4e3a\u8bb0\u4f4fX\u662f\u8fd9\u4e2a\u4f8b\u5b50\u5217\u8868\uff0c7-8-9\u3002\u6211\u53ef\u4ee5\u95ee\u5c3e\u7684X\uff0c\u90a3\u4f1a\u7ed9\u6211\u8fd4\u56de\u5217\u88688-9\u3002\u5982\u679c\u6211\u60f3\u8981\u90a3\u4e2a\u5217\u8868\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u5fc5\u987b\u95ee\u5934\u7684\u5c3e\u7684X\uff0c\u90a3\u4e48\u6211\u4f1a\u5f97\u5230\u516b\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u95ee\u5c3e\u7684\u5c3e\u7684X\u3002\u90a3\u5c06\u662f\u4e00\u4e2a\u5143\u7d20\u5217\u8868\u4e5d\u3002\u4f60\u4e5f\u53ef\u4ee5\u95ee\u5c3e\u7684\u5c3e\u7684\u5c3e\u7684X\u3002\u4e00\u4e2aM\u5143\u7d20\u5217\u8868\u7684\u5c3e\u662f\u4ec0\u4e48\uff1f\u5b83\u662f\u96f6\u5143\u7d20\u5217\u8868\u3002\u6240\u4ee5\u8fd9\u662f\u7a7a\u5217\u8868\u3002\u73b0\u5728\u5982\u679c\u4f60\u95ee\u5934\u6216\u5c3e\u7684\u90a3\u4e2a\uff0c\u90a3\u4f1a\u7c7b\u578b\u68c0\u67e5\uff0c\u90a3\u5982\u679c\u6211\u5b9e\u9645\u4e0a\u8bc4\u4f30\u8fd9\u4e2a\uff0c\u6211\u5f97\u5230\u4e00\u4e2a\u672a\u6355\u83b7\u7684\u5f02\u5e38\uff0c\u8bd5\u56fe\u53d6\u5934\u6216\u5c3e\u7684\u7a7a\u5217\u8868\u3002\u6211\u5f97\u5230\u540c\u6837\u7684\u4e1c\u897f\uff0c\u5982\u679c\u6211\u4f7f\u7528\u5934\u3002\u597d\u7684\u3002\u6240\u4ee5\u8fd9\u5c31\u662f\u8bbf\u95ee\u5217\u8868\u7684\u90e8\u5206\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u771f\u7684\u4e13\u6ce8\u4e8e\u8bed\u6cd5\u548c\u8bc4\u4f30\u89c4\u5219\u3002\u73b0\u5728\u8ba9\u6211\u4eec\u5207\u6362\u5230\u8c08\u8bba\u5217\u8868\u7684\u7c7b\u578b\u548c\u5236\u4f5c\u548c\u4f7f\u7528\u5b83\u4eec\u7684\u51fd\u6570\u7684\u7c7b\u578b\u3002\u6240\u4ee5\uff0c\u5c31\u50cf\u5f53\u6211\u4eec\u6709\u5143\u7ec4\u65f6\uff0c\u6211\u4eec\u6709\u4e00\u79cd\u65b0\u7684\u5199\u7c7b\u578b\u7684\u65b9\u5f0f\u3002\u6240\u4ee5int star int\u662f\u4e00\u4e2a\u6574\u6570\u5bf9\u7684\u4f8b\u5b50\u3002\u6211\u4eec\u6709\u5217\u8868\u7684\u65b0\u7c7b\u578b\u3002\u6240\u4ee5\u5bf9\u4e8e\u4efb\u4f55\u7c7b\u578bt\uff0c\u7c7b\u578bt\u7a7a\u95f4\u5217\u8868\u63cf\u8ff0\u4e86\u6301\u6709\u952e\u5143\u7d20\u7684\u5217\u8868\u7684\u503c\u3002\u6240\u4ee5\uff0c\u6b63\u5982\u6211\u4eec\u5728\u4f8b\u5b50\u4e2d\u770b\u5230\u7684\uff0cint list\u662f\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002bool list\u662f\u4e00\u4e2a\u5e03\u5c14\u5217\u8868\uff0c\u7b49\u7b49\u3002\u73b0\u5728\u8fd9\u4e9b\u4e8b\u60c5\u53ef\u4ee5\u5d4c\u5957\uff0c\u6211\u60f3\u6211\u5df2\u7ecf\u5411\u4f60\u5c55\u793a\u4e86\u4e00\u70b9\u8fd9\u4e2a\uff0c\u5982\u679c\u6211\u505a\u4e00\u4e2a\u5bf9\u4e8b\u4ef6\u7684\u5217\u8868\u3002\u90a3\u5f88\u597d\uff0c\u90a3\u662fint star int list\u3002\u5b83\u662f\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u4e3aint star int\u7684\u5217\u8868\u3002\u6240\u4ee5\u5982\u679c\u6211\u5c1d\u8bd5cons\uff0c\u4e09\u5230\u90a3\u4e2a\uff0c\u5b83\u4e0d\u4f1a\u7c7b\u578b\u68c0\u67e5\uff0c\u4f46\u5982\u679c\u6211\u5c1d\u8bd5cons\u4e00\u4e2a\u6574\u6570\u5bf9\u5230\u90a3\u4e2a\uff0c\u4f1a\u7c7b\u578b\u68c0\u67e5\u3002\u597d\u7684\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u5d4c\u5957\u8fd9\u4e9b\u4e8b\u60c5\uff0c\u53ea\u8981\u4f60\u60f3\u8981\u3002\u4f60\u53ef\u4ee5\u6709\u4e00\u4e2a\u5185\u90e8\u6709\u53e6\u4e00\u4e2a\u6574\u6570\u5217\u8868\u7684\u5217\u8868\u3002\u6211\u5df2\u7ecf\u5411\u4f60\u5c55\u793a\u4e86\u4e00\u4e2a\u3002\u4f60\u53ef\u4ee5\u6709\u4e00\u4e2a\u5bf9\u4e2d\u6709\u5217\u8868\u7684\u5bf9\u7684\u5217\u8868\uff0c\u7b49\u7b49\u3002\u597d\u7684\uff0c\u4f46\u662f\u5173\u4e8e\u6211\u7ed9\u4f60\u7684\u6784\u5efa\u5217\u8868\u548c\u8bbf\u95ee\u5217\u8868\u7684\u64cd\u4f5c\u7684\u7c7b\u578b\u5462\uff1f\u6240\u4ee5\u53ef\u80fd\u6700\u96be\u7406\u89e3\u7684\u662f\u7a7a\u5217\u8868\u7684\u7c7b\u578b\u3002\u6240\u4ee5\u6211\u4e4b\u524d\u5411\u4f60\u5c55\u793a\u8fc7\uff0c\u8fd9\u4e2a\u7c7b\u578b\u5199\u4e3a\u5f15\u53f7\uff0c\u4e00\u4e2a\u7a7a\u95f4\u5217\u8868\u3002\u6211\u603b\u662f\u53d1\u97f3\u5f15\u53f7a\u4e3aalpha\uff0c\u50cf\u5e0c\u814a\u5b57\u6bcd\u3002\u6240\u4ee5\u6211\u4eec\u8bf4\u7a7a\u5217\u8868\u6709\u7c7b\u578balpha\u5217\u8868\u3002\u8fd9\u5b9e\u9645\u4e0a\u610f\u5473\u7740\u4f60\u53ef\u4ee5\u7528\u4efb\u4f55\u7c7b\u578b\u66ff\u6362\u90a3\u4e2aalpha\u3002\u6240\u4ee5\u7a7a\u5217\u8868\u53ef\u4ee5\u6709\u7c7b\u578bint list\uff0c\u4f46\u5b83\u4e5f\u53ef\u4ee5\u6709\u7c7b\u578bbool list\uff0c\u5b83\u4e5f\u53ef\u4ee5\u6709\u7c7b\u578bint star int list\uff0c\u7b49\u7b49\u3002\u8fd9\u662f\u597d\u7684\uff0c\u56e0\u4e3a\u8fd9\u8ba9\u6211\u4eec\u53ef\u4ee5cons\u4e09\u5230\u7a7a\u5217\u8868\u5f97\u5230\u4e00\u4e2ain\u5217\u8868\u6216\u8005\u771f\u5230\u7a7a\u5217\u8868\u5f97\u5230\u4e00\u4e2abool\u5217\u8868\u3002\u6240\u4ee5\uff0c\u7a7a\u5217\u8868\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u4e1c\u897f\uff0c\u5b83\u53ef\u4ee5\u6709\u5f88\u591a\u7c7b\u578b\u3002\u5b83\u7684\u7c7b\u578b\u662falpha\u5217\u8868\uff0c\u8fd9\u8ba9\u5b83\u4e5f\u53ef\u4ee5\u6709\u7c7b\u578bT\u5217\u8868\uff0c\u5bf9\u4e8e\u4efb\u4f55\u7c7b\u578bT\u3002\u597d\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u770b\u5230\u8fd9\u548c\u5176\u4ed6\u64cd\u4f5c\u4e5f\u662f\u4e00\u4e2a\u4e3b\u9898\u3002cons\u64cd\u4f5c\u7b26\u4e5f\u9002\u7528\u4e8e\u4efb\u4f55\u7c7b\u578b\u7684\u5217\u8868\u3002\u89c4\u5219\u662fE2\u5fc5\u987b\u6709\u7c7b\u578bt\u5217\u8868\uff0c\u5bf9\u4e8e\u67d0\u4e9bt\uff0c\u7136\u540eE1\u5fc5\u987b\u6709\u7c7b\u578bt\uff0c\u56e0\u4e3a\u4f60\u5fc5\u987b\u6dfb\u52a0\u6b63\u786e\u7c7b\u578b\u7684\u4e1c\u897f\u5230\u4f60\u5f00\u59cb\u7684\u5217\u8868\u3002\u7136\u540e\u6211\u4eec\u6709\u6211\u4eec\u7684\u64cd\u4f5c\u6765\u8bbf\u95ee\u5217\u8868\uff0c\u6d4b\u8bd5\u5b83\u4eec\u662f\u5426\u4e3a\u7a7a\uff0c\u5f97\u5230\u5b83\u4eec\u7684\u5934\uff0c\u5f97\u5230\u5b83\u4eec\u7684\u5c3e\uff0c\u8fd9\u4e9b\u771f\u7684\u53ea\u662fML\u4e2d\u7684\u51fd\u6570\u3002\u6240\u4ee5\u6211\u5728\u8fd9\u91cc\u5199\u4e86\u5b83\u4eec\u7684\u7c7b\u578b\uff0c\u4f46\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u5230\u90a3\u4e2a\u8bfb\u8bc4\u4f30\u6253\u5370\u5faa\u73af\u3002\u6240\u4ee5null\u53ea\u662f\u4e00\u4e2a\u51fd\u6570\u3002\u518d\u6b21\uff0c\u5b83\u4e0d\u50cf\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684null\uff0c\u5b83\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u5217\u8868alpha\u3002\u6240\u4ee5\u5bf9\u4e8e\u6240\u6709\u7c7b\u578balpha\uff0c\u4f60\u53ef\u4ee5\u63a5\u53d7\u4e00\u4e2aalpha\u5217\u8868\uff0c\u6211\u4eec\u4f1a\u7ed9\u4f60\u8fd4\u56de\u771f\u6216\u5047\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4e0d\u80fd\u95eenull\u4e00\u4e2a\u6574\u6570\u5217\u8868\u6216\u4e00\u4e2a\u5e03\u5c14\u5217\u8868\u3002\u5728\u8bfe\u7a0b\u540e\u9762\u7684\u51e0\u4e2a\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u7f16\u5199\u6211\u4eec\u81ea\u5df1\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u6709\u8fd9\u4e9balpha\u7684\u7c7b\u578b\uff0c\u5982\u679c\u4f60\u559c\u6b22\uff0c\u8fd8\u6709\u5176\u4ed6\u5e0c\u814a\u5b57\u6bcd\uff0c\u4f46\u73b0\u5728\u6211\u4eec\u53ea\u662f\u8981\u4f7f\u7528ML\u8bed\u8a00\u63d0\u4f9b\u7ed9\u6211\u4eec\u7684\u90a3\u4e9b\u3002\u7c7b\u4f3c\u5730\uff0c\u5934\u63a5\u53d7\u4efb\u4f55\u7c7b\u578b\u7684\u5217\u8868alpha\uff0c\u4f60\u5f97\u5230\u7684\u662f\u4e00\u4e2aalpha\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\uff0c\u5982\u679c\u4f60\u7528\u4e00\u4e2a\u6574\u6570\u5217\u8868\u8c03\u7528\u5934\uff0c\u4f60\u5f97\u5230\u4e00\u4e2a\u6574\u6570\uff0c\u5982\u679c\u4f60\u7528\u4e00\u4e2a\u5e03\u5c14\u5217\u8868\u8c03\u7528\u5b83\uff0c\u4f60\u5f97\u5230\u4e00\u4e2a\u5e03\u5c14\u3002\u6700\u540e\uff0c\u5c3e\u63a5\u53d7\u4e00\u4e2a\u5217\u8868\u5e76\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0calpha\u5217\u8868\u5230alpha\u5217\u8868\uff0c\u8fd9\u4e24\u4e2a\u7c7b\u578b\uff0c\u5217\u8868\uff0c\u5fc5\u987b\u6709\u76f8\u540c\u7684\u7c7b\u578b\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\uff0c\u5982\u679c\u6211\u8bf4\u5c3e\u76843\uff0c4\uff0c\u6211\u5f97\u5230\u4e00\u4e2a\u6574\u6570\u5217\u8868\u56de\u6765\uff0c\u56e0\u4e3a\u6211\u4f20\u5165\u4e86\u4e00\u4e2a\u6574\u6570\u5217\u8868\u3002\u597d\u7684\uff1f\u6240\u4ee5\u73b0\u5728\u6211\u4eec\u77e5\u9053\u6211\u4eec\u6784\u5efa\u5217\u8868\u548c\u8bbf\u95ee\u5217\u8868\u7684\u5173\u952e\u64cd\u4f5c\u3002\u6211\u4eec\u5c06\u8981\u505a\u7684\u662f\u5728\u51fd\u6570\u7f16\u7a0b\u4e2d\u975e\u5e38\u5f3a\u5927\uff0c\u975e\u5e38\u5e38\u89c1\u7684\u4e8b\u60c5\uff0c\u90a3\u5c31\u662f\u7f16\u5199\u6709\u7528\u7684\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u63a5\u53d7\u8fd4\u56de\u5217\u8868\u3002</p>"},{"location":"course/rust/","title":"OverView","text":"<p>cheatsheet</p>"},{"location":"course/rust/other/","title":"\u5c16\u62ec\u53f7","text":""},{"location":"course/rust/other/#rust","title":"Rust \u4e2d\u5c16\u62ec\u53f7\u7684\u4f7f\u7528","text":"<p>\u5728 Rust \u4e2d\uff0c\u5c16\u62ec\u53f7<code>&lt;&gt;</code>\u7528\u9014\u5e7f\u6cdb\uff0c\u4e3b\u8981\u7528\u4e8e\u8868\u793a\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3001trait \u7ea6\u675f\u548c\u751f\u547d\u5468\u671f\u6ce8\u89e3\u3002\u4ee5\u4e0b\u662f\u5177\u4f53\u7528\u9014\u7684\u603b\u7ed3\uff1a</p>"},{"location":"course/rust/other/#_2","title":"\u6cdb\u578b\u7c7b\u578b\u53c2\u6570","text":"<ul> <li> <p>\u7ed3\u6784\u4f53\u6216\u679a\u4e3e\uff1a   \u5b9a\u4e49\u4e00\u4e2a\u6cdb\u578b\u7ed3\u6784\u4f53\u6216\u679a\u4e3e\u65f6\uff0c\u5728\u5176\u540d\u79f0\u540e\u7d27\u63a5\u5c16\u62ec\u53f7\uff0c\u5185\u90e8\u5305\u542b\u6cdb\u578b\u7c7b\u578b\u53c2\u6570\u3002   <pre><code>struct Point&lt;T&gt; {\n    x: T,\n    y: T,\n}\n</code></pre></p> </li> <li> <p>\u51fd\u6570\u3001\u65b9\u6cd5\u6216 trait\uff1a   \u5b9a\u4e49\u6cdb\u578b\u51fd\u6570\u3001\u65b9\u6cd5\u6216 trait \u65f6\uff0c\u5728\u5176\u540d\u79f0\u540e\u7d27\u63a5\u5c16\u62ec\u53f7\uff0c\u5185\u90e8\u58f0\u660e\u6cdb\u578b\u53c2\u6570\u3002   <pre><code>fn my_function&lt;T&gt;(param: T) {}\n</code></pre></p> </li> </ul>"},{"location":"course/rust/other/#trait","title":"Trait \u7ea6\u675f","text":"<ul> <li> <p><code>impl</code> \u5173\u952e\u5b57\u540e\u9762\uff1a   \u5728\u5bf9\u6cdb\u578b\u7c7b\u578b\u5b9e\u73b0\u67d0\u4e2a trait \u65f6\uff0c\u4f7f\u7528<code>impl&lt;T: SomeTrait&gt;</code>\u6765\u8868\u793a\u7c7b\u578b\u53c2\u6570<code>T</code>\u5e26\u6709\u67d0\u4e9b\u7ea6\u675f\u3002   <pre><code>impl&lt;T: Display&gt; ToString for T {}\n</code></pre></p> </li> <li> <p>\u51fd\u6570\u6216\u65b9\u6cd5\u53c2\u6570\u4e2d\uff1a   \u5728\u6cdb\u578b\u51fd\u6570\u6216\u65b9\u6cd5\u4e2d\uff0c\u53ef\u4ee5\u901a\u8fc7<code>where</code>\u5b50\u53e5\u5728\u5c16\u62ec\u53f7\u5185\u65bd\u52a0\u66f4\u590d\u6742\u7684 trait \u7ea6\u675f\u3002   <pre><code>fn some_function&lt;T&gt;(param: T)\nwhere\n    T: SomeTrait + AnotherTrait,\n{}\n</code></pre></p> </li> </ul>"},{"location":"course/rust/other/#lifetimes","title":"\u751f\u547d\u5468\u671f\uff08Lifetimes\uff09","text":"<ul> <li> <p>\u7ed3\u6784\u4f53\u3001\u51fd\u6570\u3001\u65b9\u6cd5\u5b9a\u4e49\u4e2d\uff1a   \u751f\u547d\u5468\u671f\u6ce8\u89e3\u4e5f\u4f7f\u7528\u5c16\u62ec\u53f7\uff0c\u5e38\u89c1\u5f62\u5f0f\u4e3a\u6487\u53f7\u5f00\u59cb\u7684\u5c0f\u5199\u5b57\u6bcd\uff0c\u5982<code>&lt;'a&gt;</code>\uff0c\u7528\u4e8e\u6307\u5b9a\u5f15\u7528\u7684\u6709\u6548\u671f\u3002   <pre><code>fn borrow_something&lt;'a&gt;(item: &amp;'a T) {}\n</code></pre></p> </li> <li> <p><code>impl</code> \u5757\u4e2d\uff1a   \u5728\u5bf9\u6cdb\u578b\u7c7b\u578b\u8fdb\u884c\u65b9\u6cd5\u5b9e\u73b0\u65f6\uff0c\u5982\u679c\u65b9\u6cd5\u6d89\u53ca\u5230\u5f15\u7528\uff0c\u53ef\u80fd\u9700\u8981\u58f0\u660e\u751f\u547d\u5468\u671f\u53c2\u6570\u3002   <pre><code>impl&lt;'a&gt; SomeStruct&lt;'a&gt; {}\n</code></pre></p> </li> </ul>"},{"location":"course/rust/other/#_3","title":"\u7efc\u5408\u8bf4\u660e","text":"<p>Rust \u4e2d\u7684\u5c16\u62ec\u53f7<code>&lt;&gt;</code>\u5e7f\u6cdb\u5e94\u7528\u4e8e\u58f0\u660e\uff1a</p> <ul> <li>\u6cdb\u578b\u53c2\u6570\uff08\u7c7b\u578b\u3001trait \u7ea6\u675f\uff09</li> <li>\u751f\u547d\u5468\u671f\u6ce8\u89e3</li> </ul> <p>\u901a\u8fc7\u4e0a\u4e0b\u6587\u6765\u7406\u89e3\u5c16\u62ec\u53f7\u7684\u5177\u4f53\u542b\u4e49\u662f\u5173\u952e\uff0c\u5c16\u62ec\u53f7\u53ef\u4ee5\u51fa\u73b0\u5728\u7c7b\u578b\u540d\u3001trait \u540d\u3001<code>impl</code> \u5173\u952e\u5b57\u540e\u9762\uff0c\u6216\u5176\u5185\u90e8\uff0c\u4ee5\u63d0\u4f9b\u5173\u4e8e\u6cdb\u578b\u53c2\u6570\u3001trait \u7ea6\u675f\u6216\u751f\u547d\u5468\u671f\u7684\u4fe1\u606f\u3002</p>"},{"location":"course/rust/other/#dynamically-sized-types","title":"Dynamically sized types","text":"<p>str is a dynamically sized type (DST). A DST is a type whose size is not known at compile time. Whenever you have a reference to a DST, like &amp;str, it has to include additional information about the data it points to. It is a fat pointer. In the case of &amp;str, it stores the length of the slice it points to. We'll see more examples of DSTs in the rest of the course.</p>"},{"location":"course/rust/questation/","title":"\u601d\u8003","text":"<p>\u601d\u8003</p> <p>\u4e8b\u5b9e\u4e0a \u6211\u8fd8\u662f\u80fd\u591f\u6784\u5efa\u51fa \u5bfc\u81f4\u4e24\u4e2a\u53d8\u91cf\u540c\u65f6\u62e5\u6709\u4e00\u4e2a\u5730\u5740\u6240\u6709\u6743 \uff0c\u4f46\u662f\u8fd9\u91cc\u5728\u91ca\u653e\u8d44\u6e90\u65f6 \u4e3a\u4ec0\u4e48\u6ca1\u6709\u591a\u6b21\u91ca\u653e\u8d44\u6e90\u7684 undefine reference  <pre><code>fn main() {\n        let mut x: Box&lt;i32&gt; = Box::new(1); \n        *x += 1;               \n\n        let  r2 = &amp;mut *x; \n        *r2  +=3;   \n        let c: i32 = *r2;  \n        println!{\"{x}\"};\n        println!(\"{c}\");\n        println!{\"{x}\"};\n        println!(\"{c}\");\n}\n\n//out   \n// warning: `/root/.cargo/config` is deprecated in favor of `config.toml`\n// note: if you need to support cargo 1.38 or earlier, you can symlink `config` to `config.toml`\n// warning: `/root/.cargo/config` is deprecated in favor of `config.toml`\n// note: if you need to support cargo 1.38 or earlier, you can symlink `config` to `config.toml`\n//    Compiling a v0.1.0 (/root/rust/a)\n//     Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.22s\n//      Running `target/debug/a`\n// 5\n// 5\n// 5\n// 5\n</code></pre></p> <p></p>"},{"location":"course/rust/rust_cheat_sheet/","title":"basic","text":""},{"location":"course/rust/rust_cheat_sheet/#macro","title":"Macro","text":"println!panic!format!assert! <pre><code>macro_rules! println {\n    () =&gt; { ... };\n    ($($arg:tt)*) =&gt; { ... };\n}\n//============================\n#![allow(unused)]\nfn main() {\n    println!(); // prints just a newline\n    println!(\"hello there!\");\n    println!(\"format {} arguments\", \"some\");\n    let local_variable = \"some\";\n    println!(\"format {local_variable} arguments\");\n}\n</code></pre> <pre><code>macro_rules! panic {\n    ($($arg:tt)*) =&gt; { ... };\n}\n//===========================================\npanic!();\npanic!(\"this is a terrible mistake!\");\npanic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\nstd::panic::panic_any(4); // panic with the value of 4 to be collected elsewher\n</code></pre> <pre><code>macro_rules! format {\n    ($($arg:tt)*) =&gt; { ... };\n}\n//====================================\nformat!(\"test\");                             // =&gt; \"test\"\nformat!(\"hello {}\", \"world!\");               // =&gt; \"hello world!\"\nformat!(\"x = {}, y = {val}\", 10, val = 30);  // =&gt; \"x = 10, y = 30\"\nlet (x, y) = (1, 2);\nformat!(\"{x} + {y} = 3\");                    // =&gt; \"1 + 2 = 3\"\n</code></pre> <pre><code>macro_rules! assert {\n    ($cond:expr $(,)?) =&gt; { ... };\n    ($cond:expr, $($arg:tt)+) =&gt; { ... };\n}\n//====================================\nassert!(true);\n\nfn some_computation() -&gt; bool { true } // a very simple function\n\nassert!(some_computation());\n\n// assert with a custom message\nlet x = true;\nassert!(x, \"x wasn't true!\");\n\nlet a = 3; let b = 27;\nassert!(a + b == 30, \"a = {}, b = {}\", a, b);\n</code></pre>"},{"location":"course/rust/rust_cheat_sheet/#memory-layout","title":"Memory Layout","text":"String&amp;String&amp;str <pre><code>        +---------+--------+----------+\n  Stack | pointer | length | capacity | \n        |  |      |   5    |    5     |\n        +--|------+--------+----------+\n           |\n           |\n           v\n        +---+---+---+---+---+\n Heap:  | H | e | l | l | o |\n        +---+---+---+---+---+\n</code></pre> <pre><code>        --------------------------------------\n        |                                    |         \n   +----v----+--------+----------+      +----|----+\n   | pointer | length | capacity |      | pointer |\n   |    |    |   5    |    5     |      |         |\n   +----|----+--------+----------+      +---------+\n        |        s                          &amp;s \n        |       \n        v       \n      +---+---+---+---+---+\n      | H | e | l | l | o |\n      +---+---+---+---+---+\n</code></pre> <p><pre><code>                      s                              slice\n        +---------+--------+----------+      +---------+--------+\n  Stack | pointer | length | capacity |      | pointer | length |\n        |    |    |   5    |    5     |      |    |    |   4    |\n        +----|----+--------+----------+      +----|----+--------+\n             |        s                           |  \n             |                                    |\n             v                                    | \n           +---+---+---+---+---+                  |\n   Heap:   | H | e | l | l | o |                  |\n           +---+---+---+---+---+                  |\n                 ^                                |\n                 |                                |\n                 +--------------------------------+\n</code></pre> str is a DST type</p>"},{"location":"course/rust/rust_cheat_sheet/#control-flow","title":"Control Flow","text":"ifif/elsematch <pre><code>let number = 3;\nif number &lt; 5 {\n    println!(\"`number` is smaller than 5\");\n}\n</code></pre> <pre><code>let number = 3;\n\nif number &lt; 5 {\n    println!(\"`number` is smaller than 5\");\n} else {\n    println!(\"`number` is greater than or equal to 5\");\n}\n</code></pre> <pre><code>enum Status {\n    ToDo,\n    InProgress,\n    Done\n}\n\nimpl Status {\n    fn is_done(&amp;self) -&gt; bool {\n        match self {\n            Status::Done =&gt; true,\n            // The `|` operator lets you match multiple patterns.\n            // It reads as \"either `Status::ToDo` or `Status::InProgress`\".\n            Status::InProgress | Status::ToDo =&gt; false\n        }\n    }\n}\n</code></pre>"},{"location":"course/rust/rust_cheat_sheet/#loop","title":"Loop","text":"whileforloop <pre><code>let sum = 0;\nlet i = 1;\n// \"while i is less than or equal to 5\"\nwhile i &lt;= 5 {\n    // `+=` is a shorthand for `sum = sum + i`\n    sum += i;\n    i += 1;\n}    \n</code></pre> <pre><code>let mut sum = 0;\nfor i in 1..=5 {\n    sum += i;\n}\n</code></pre> <pre><code>loop {\n        count += 1;\n\n        if count == 3 {\n            println!(\"three\");\n\n            // Skip the rest of this iteration\n            continue;\n        }\n\n        println!(\"{}\", count);\n\n        if count == 5 {\n            println!(\"OK, that's enough\");\n\n            // Exit this loop\n            break;      //(1)\n        }\n    }\n</code></pre> <ol> <li>loop familary with while , but only stop when meet break</li> </ol>"},{"location":"course/rust/rust_cheat_sheet/#derive-macros","title":"Derive macros","text":""},{"location":"course/rust/rust_cheat_sheet/#generic-programming","title":"Generic programming","text":"<pre><code>fn print_if_even&lt;T&gt;(n: T)  //(1)\nwhere\n    T: IsEven + Debug  //(2)\n{\n    if n.is_even() {\n        println!(\"{n:?} is even\");\n    }\n}\n</code></pre> <ol> <li>\u53c2\u6570n\u7684\u7c7b\u578b\u662fT</li> <li>\u8fd9\u91cc\u7684\u5192\u53f7\u610f\u5473\u7740\u7ea6\u675f\uff0c\u7ea6\u675f\u4e3a\u7c7b\u578bT\u5fc5\u987b\u5b9e\u73b0\u67d0\u4e2atrait</li> </ol> <p>Two different trait bounds</p> where clauseinline <pre><code>fn print_if_even&lt;T&gt;(n: T)\nwhere\n    T: IsEven + Debug\n//  ^^^^^^^^^^^^^^^^^\n//  This is a `where` clause\n{\n    // [...]\n}\n</code></pre> <pre><code>fn print_if_even&lt;T: IsEven + Debug&gt;(n: T) {\n    //           ^^^^^^^^^^^^^^^^^\n    //           This is an inline trait bound\n    // [...]\n}\n</code></pre>"},{"location":"course/rust/rust_cheat_sheet/#generics-and-associated-types","title":"Generics and associated types","text":"<p>Example  <pre><code>pub trait From&lt;T&gt; {   //(1)\n    fn from(value: T) -&gt; Self;\n}\n\npub trait Deref {\n    type Target;      //(2)\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target;\n}\n</code></pre></p> <ol> <li>from \u5b9e\u73b0\u4e86\u6cdb\u578b  </li> <li>deref \u5b9e\u73b0\u4e86\u5173\u8054\u7c7b\u578b</li> </ol> <p>\u5173\u8054\u7c7b\u578b\uff0c\u5bf9\u4e8e\u4e00\u79cdstruct ,\u53ea\u53ef\u80fd\u6709\u4e00\u79cd\u5b9e\u73b0  \u800c\u5bf9\u4e8e\u6cdb\u578b\uff0c\u5728impl\u65f6\u53ef\u4ee5\u4f20\u5165\u591a\u79cd\u4e0d\u540c\u7684\u53c2\u6570</p> <p>An associated type is uniquely determined by the trait implementation. you'll only be able to specify one Target for a given type and there won't be any ambiguity.</p>"},{"location":"course/rust/rust_cheat_sheet/#_1","title":"\u5c16\u62ec\u53f7&lt;&gt;","text":"<p>\u5c16\u62ec\u53f7</p>"},{"location":"course/rust/rust_cheat_sheet/#compound-types","title":"\u590d\u5408\u7c7b\u578b\uff08Compound Types\uff09","text":"StructEnumTuplesArray <pre><code>An enumeration is a type that can have a fixed set of values, called variants.\nIn Rust, you define an enumeration using the enum keyword:\n\nenum Status {\n    ToDo,\n    InProgress,\n    Done,\n}\nenum, just like struct, defines a new Rust type.\n</code></pre>"},{"location":"course/rust/rust_cheat_sheet/#trait","title":"Trait","text":"<p>\ud83c\udf1f The trait is defined in the current crate</p> <p>\ud83c\udf1f The implementor type is defined in the current crate </p>"},{"location":"course/rust/rust_cheat_sheet/#operator","title":"Operator","text":"AddSubMulDivRemPartialEqPartialOrd <pre><code>pub trait Add&lt;Rhs = Self&gt; {\n    type Output;\n\n    // Required method\n    fn add(self, rhs: Rhs) -&gt; Self::Output;\n}\n\n//==========================\n\nuse std::ops::Add;\n\n#[derive(Debug, Copy, Clone, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Add for Point {\n    type Output = Self;\n\n    fn add(self, other: Self) -&gt; Self {\n        Self {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\n\nassert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n        Point { x: 3, y: 3 });\n</code></pre> <pre><code>pub trait Sub&lt;Rhs = Self&gt; {\n    type Output;\n\n    // Required method\n    fn sub(self, rhs: Rhs) -&gt; Self::Output;\n}\n\n//============================================\nuse std::ops::Sub;\n\n#[derive(Debug, Copy, Clone, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Sub for Point {\n    type Output = Self;\n\n    fn sub(self, other: Self) -&gt; Self::Output {\n        Self {\n            x: self.x - other.x,\n            y: self.y - other.y,\n        }\n    }\n}\n\nassert_eq!(Point { x: 3, y: 3 } - Point { x: 2, y: 3 },\n        Point { x: 1, y: 0 });\n</code></pre> <pre><code>pub trait Mul&lt;Rhs = Self&gt; {\n    type Output;\n\n    // Required method\n    fn mul(self, rhs: Rhs) -&gt; Self::Output;\n}\n\n//==========================\nuse std::ops::Mul;\n\n// By the fundamental theorem of arithmetic, rational numbers in lowest\n// terms are unique. So, by keeping `Rational`s in reduced form, we can\n// derive `Eq` and `PartialEq`.\n#[derive(Debug, Eq, PartialEq)]\nstruct Rational {\n    numerator: usize,\n    denominator: usize,\n}\n\nimpl Rational {\n    fn new(numerator: usize, denominator: usize) -&gt; Self {\n        if denominator == 0 {\n            panic!(\"Zero is an invalid denominator!\");\n        }\n\n        // Reduce to lowest terms by dividing by the greatest common\n        // divisor.\n        let gcd = gcd(numerator, denominator);\n        Self {\n            numerator: numerator / gcd,\n            denominator: denominator / gcd,\n        }\n    }\n}\n\nimpl Mul for Rational {\n    // The multiplication of rational numbers is a closed operation.\n    type Output = Self;\n\n    fn mul(self, rhs: Self) -&gt; Self {\n        let numerator = self.numerator * rhs.numerator;\n        let denominator = self.denominator * rhs.denominator;\n        Self::new(numerator, denominator)\n    }\n}\n\n// Euclid's two-thousand-year-old algorithm for finding the greatest common\n// divisor.\nfn gcd(x: usize, y: usize) -&gt; usize {\n    let mut x = x;\n    let mut y = y;\n    while y != 0 {\n        let t = y;\n        y = x % y;\n        x = t;\n    }\n    x\n}\n\nassert_eq!(Rational::new(1, 2), Rational::new(2, 4));\nassert_eq!(Rational::new(2, 3) * Rational::new(3, 4),\n        Rational::new(1, 2));\n</code></pre> <pre><code>pub trait Div&lt;Rhs = Self&gt; {\n    type Output;\n\n    // Required method\n    fn div(self, rhs: Rhs) -&gt; Self::Output;\n}\n\n//========\nuse std::ops::Div;\n\n// By the fundamental theorem of arithmetic, rational numbers in lowest\n// terms are unique. So, by keeping `Rational`s in reduced form, we can\n// derive `Eq` and `PartialEq`.\n#[derive(Debug, Eq, PartialEq)]\nstruct Rational {\n    numerator: usize,\n    denominator: usize,\n}\n\nimpl Rational {\n    fn new(numerator: usize, denominator: usize) -&gt; Self {\n        if denominator == 0 {\n            panic!(\"Zero is an invalid denominator!\");\n        }\n\n        // Reduce to lowest terms by dividing by the greatest common\n        // divisor.\n        let gcd = gcd(numerator, denominator);\n        Self {\n            numerator: numerator / gcd,\n            denominator: denominator / gcd,\n        }\n    }\n}\n\nimpl Div for Rational {\n    // The division of rational numbers is a closed operation.\n    type Output = Self;\n\n    fn div(self, rhs: Self) -&gt; Self::Output {\n        if rhs.numerator == 0 {\n            panic!(\"Cannot divide by zero-valued `Rational`!\");\n        }\n\n        let numerator = self.numerator * rhs.denominator;\n        let denominator = self.denominator * rhs.numerator;\n        Self::new(numerator, denominator)\n    }\n}\n\n// Euclid's two-thousand-year-old algorithm for finding the greatest common\n// divisor.\nfn gcd(x: usize, y: usize) -&gt; usize {\n    let mut x = x;\n    let mut y = y;\n    while y != 0 {\n        let t = y;\n        y = x % y;\n        x = t;\n    }\n    x\n}\n\nassert_eq!(Rational::new(1, 2), Rational::new(2, 4));\nassert_eq!(Rational::new(1, 2) / Rational::new(3, 4),\n        Rational::new(2, 3));\n</code></pre> <pre><code>pub trait Rem&lt;Rhs = Self&gt; {\n    type Output;\n\n    // Required method\n    fn rem(self, rhs: Rhs) -&gt; Self::Output;\n}\n\n//================================\n\nuse std::ops::Rem;\n\n#[derive(PartialEq, Debug)]\nstruct SplitSlice&lt;'a, T&gt; {\n    slice: &amp;'a [T],\n}\n\nimpl&lt;'a, T&gt; Rem&lt;usize&gt; for SplitSlice&lt;'a, T&gt; {\n    type Output = Self;\n\n    fn rem(self, modulus: usize) -&gt; Self::Output {\n        let len = self.slice.len();\n        let rem = len % modulus;\n        let start = len - rem;\n        Self {slice: &amp;self.slice[start..]}\n    }\n}\n\n// If we were to divide &amp;[0, 1, 2, 3, 4, 5, 6, 7] into slices of size 3,\n// the remainder would be &amp;[6, 7].\nassert_eq!(SplitSlice { slice: &amp;[0, 1, 2, 3, 4, 5, 6, 7] } % 3,\n        SplitSlice { slice: &amp;[6, 7] });\n</code></pre> <pre><code>pub trait PartialEq {\n    // Required method\n    //\n    // `Self` is a Rust keyword that stands for \n    // \"the type that is implementing the trait\"\n    fn eq(&amp;self, other: &amp;Self) -&gt; bool;\n\n    // Provided method\n    fn ne(&amp;self, other: &amp;Self) -&gt; bool { ... }  //(1)\n}\n\n//====================\nuse std::ops::Add;\n\n#[derive(Debug, Copy, Clone, PartialEq)]\nstruct Point {\n    x: i32,\n    y: i32,\n}\n\nimpl Add for Point {\n    type Output = Self;\n\n    fn add(self, other: Self) -&gt; Self {\n        Self {\n            x: self.x + other.x,\n            y: self.y + other.y,\n        }\n    }\n}\n\nassert_eq!(Point { x: 1, y: 0 } + Point { x: 2, y: 3 },\n        Point { x: 3, y: 3 });\n</code></pre> <ol> <li>fn ne is implmented by default</li> </ol> <pre><code>pub trait PartialOrd&lt;Rhs = Self&gt;: PartialEq&lt;Rhs&gt;\nwhere\n    Rhs: ?Sized,\n{\n    // Required method\n    fn partial_cmp(&amp;self, other: &amp;Rhs) -&gt; Option&lt;Ordering&gt;; //(1)\n\n    // Provided methods\n    fn lt(&amp;self, other: &amp;Rhs) -&gt; bool { ... }\n    fn le(&amp;self, other: &amp;Rhs) -&gt; bool { ... }\n    fn gt(&amp;self, other: &amp;Rhs) -&gt; bool { ... }\n    fn ge(&amp;self, other: &amp;Rhs) -&gt; bool { ... }\n}\n\n//\n</code></pre> <ol> <li>the only one need to be done</li> </ol>"},{"location":"course/rust/rust_cheat_sheet/#other","title":"Other","text":"DerefSizedFromIntoCloneCopyDrop <pre><code>//std::ops\npub trait Deref {\n    type Target: ?Sized;\n\n    // Required method\n    fn deref(&amp;self) -&gt; &amp;Self::Target;\n}\n\n//==========================\n\nuse std::ops::Deref;\n\nstruct DerefExample&lt;T&gt; {\n    value: T\n}\n\nimpl&lt;T&gt; Deref for DerefExample&lt;T&gt; {\n    type Target = T;\n\n    fn deref(&amp;self) -&gt; &amp;Self::Target {\n        &amp;self.value\n    }\n}\n\nlet x = DerefExample { value: 'a' };\nassert_eq!('a', *x);\n</code></pre> <pre><code>pub trait Sized {  //(1)\n    // This is an empty trait, no methods to implement.\n}\n</code></pre> <ol> <li>no methods to implement just means that it is a flag</li> </ol> <p> \u5982\u679c\u4e00\u4e2a\u7ed3\u6784\u4f53\u662f\u6cdb\u578b\u7684\uff0c\u90a3\u4e48\u5b83\u4f1a\u5047\u5b9a\u7ed3\u6784\u4f53\u6240\u5305\u542b\u7684\u7c7b\u578bT\u5b9e\u73b0\u4e86Size \u7684trait</p> <pre><code>pub trait From&lt;T&gt;: Sized {\n    // Required method\n    fn from(value: T) -&gt; Self;\n}\n\n//============================\n\nuse std::fs;\nuse std::io;\nuse std::num;\n\nenum CliError {\n    IoError(io::Error),\n    ParseError(num::ParseIntError),\n}\n\nimpl From&lt;io::Error&gt; for CliError {\n    fn from(error: io::Error) -&gt; Self {\n        CliError::IoError(error)\n    }\n}\n\nimpl From&lt;num::ParseIntError&gt; for CliError {\n    fn from(error: num::ParseIntError) -&gt; Self {\n        CliError::ParseError(error)\n    }\n}\n\nfn open_and_parse_file(file_name: &amp;str) -&gt; Result&lt;i32, CliError&gt; {\n    let mut contents = fs::read_to_string(&amp;file_name)?;\n    let num: i32 = contents.trim().parse()?;\n    Ok(num)\n}\n</code></pre> <p><pre><code>pub trait Into&lt;T&gt;: Sized {\n    // Required method\n    fn into(self) -&gt; T;\n}\n\n//============================\n</code></pre> From\u5b9e\u73b0\u540e\uff0c\u5c06\u81ea\u52a8\u751f\u6210\u4e00\u4e2aInto\u7684\u65b9\u6cd5\uff0c \u5728\u8fd9\u91ccsized \u662f\u7ea6\u675fFrom \u7684trait ,\u4e5f\u5c31\u662f\u7ea6\u675fself,\u610f\u5473\u7740\u5fc5\u987b\u5b9e\u73b0\u4e86sized trait\u7684\u7c7b\u578b\u624d\u80fd\u5b9e\u73b0sized , super trait??</p> <pre><code>pub trait Clone {\n    fn clone(&amp;self) -&gt; Self;\n}\n\n//========================\n</code></pre> <pre><code>pub trait Copy: Clone { } //(1)    \n</code></pre> <ol> <li>copy is an empty trait , which just a trait\uff08Marker Trait\uff09</li> </ol> <p><pre><code>pub trait Drop {\n    // Required method\n    fn drop(&amp;mut self);\n}\n\n//=======================\n\nstruct HasDrop;\n\nimpl Drop for HasDrop {\n    fn drop(&amp;mut self) {\n        println!(\"Dropping HasDrop!\");\n    }\n}\n\nstruct HasTwoDrops {\n    one: HasDrop,\n    two: HasDrop,\n}\n\nimpl Drop for HasTwoDrops {\n    fn drop(&amp;mut self) {\n        println!(\"Dropping HasTwoDrops!\");\n    }\n}\n\nfn main() {\n    let _x = HasTwoDrops { one: HasDrop, two: HasDrop };\n    println!(\"Running!\");\n}\n\n\n//output =========\n\nRunning!\nDropping HasTwoDrops!\nDropping HasDrop!\nDropping HasDrop!\n</code></pre> \u90a3\u4e48\u5982\u679c\u6ca1\u6709\u5b9e\u73b0 Drop trait \u4f1a\u4e0d\u4f1a\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f\u5462\uff1f</p> <ul> <li>\u5bf9\u4e8e Rust \u7684\u5806\u5185\u5b58\u6765\u8bf4\uff0c\u5373\u4f7f\u6ca1\u6709\u663e\u5f0f\u5730\u5b9e\u73b0 Drop trait\uff0cRust \u7684\u6240\u6709\u6743\u7cfb\u7edf\u4ecd\u7136\u4f1a\u5728\u5bf9\u8c61\u79bb\u5f00\u4f5c\u7528\u57df\u65f6\u81ea\u52a8\u91ca\u653e\u5b83\u6240\u62e5\u6709\u7684\u5185\u5b58\u8d44\u6e90\uff0c\u56e0\u6b64\u4e0d\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u6f0f\u3002</li> <li>\u4f46\u662f\uff0c\u5982\u679c\u4f60\u7684\u7c7b\u578b\u4f7f\u7528\u4e86\u9664\u4e86\u5806\u5185\u5b58\u4ee5\u5916\u7684\u5916\u90e8\u8d44\u6e90\uff0c\u6bd4\u5982\u6253\u5f00\u6587\u4ef6\u3001\u7f51\u7edc\u8fde\u63a5\u6216\u8005\u5176\u4ed6\u9700\u8981\u624b\u52a8\u91ca\u653e\u7684\u8d44\u6e90\uff0c\u800c\u6ca1\u6709\u901a\u8fc7\u5b9e\u73b0 Drop trait \u6765\u91ca\u653e\u8fd9\u4e9b\u8d44\u6e90\uff0c\u90a3\u4e48\u8fd9\u4e9b\u8d44\u6e90\u53ef\u80fd\u4e0d\u4f1a\u88ab\u6b63\u786e\u6e05\u7406\uff0c\u4ece\u800c\u5bfc\u81f4\u8d44\u6e90\u6cc4\u6f0f\u3002</li> </ul>"},{"location":"useful_resource/readeable/","title":"effictive_rust","text":"<p>effective_rust https://www.lurklurk.org/effective-rust/  rust cheatsheet https://nootn.com/rust-language-cheat-sheet/#basic-types </p>"}]}